%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% UNSW SENG2020 2012S2 GROUP 6 REPORT TEMPLATE
%% CREATED BY VINCENT WONG
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[a4paper]{article}
\usepackage[margin=1.5in]{geometry}
%\usepackage{a4wide}
\usepackage{longtable}
%\usepackage[normalem]{ulem}     %% gives strikeout capability with \sout{}
\usepackage{graphicx}
\usepackage{float}
\usepackage{amssymb}
\usepackage[usenames,dvipsnames]{color}
\RequirePackage{bsymb,b2latex}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% DOCUMENT MACROS -- DO NOT DELETE


\begin{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% TITLE PAGE
\thispagestyle{empty}      % turn off page numbering
\begin{center}
\Large\textbf{$\odot\int$ Sale} %%\odot \int Sale

\Large\textbf{Final Report}

%%%% MAKE SURE YOU SPECIFY YOUR GROUP NUMBER
\bigskip\large\textbf{Group Number: 06}
\end{center}

\vspace*{16.5cm}
\begin{tabular}{|l|l|}
  \hline
  Version         & 1.0\\\hline
  Print Date      & 21/10/2012 23:59\\\hline
  Release Date    & 21/10/2012\\\hline
  Release State   & Final\\\hline
  Approval State  & Pending\\\hline
  Approved by     & Chris, Dylan, Lasath, Vincent\\\hline
  Prepared by     & Chris, Dylan, Lasath, Vincent\\\hline
  Reviewed by     & Chris, Dylan, Lasath, Vincent\\\hline
  Confidentiality Category  & Public\\\hline
\end{tabular}
\pagebreak

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% REVISION CONTROL PAGE
\thispagestyle{plain}     % Turn on page numbering
\setcounter{page}{1}      % set page number counter
\renewcommand{\thepage}{\roman{page}}  % set page number to roman

\noindent{\Large\textbf{Document Revision Control}}\\[2ex]
\begin{tabular}{|l|l|l|l|}
  \hline
  Version & Date & Authors & Summary of Changes\\\hline\hline
  0.1 & 21/10/2012     &    Vincent     &    Created initial report structure              \\\hline
  0.5 & 21/10/2012     &    Team     &    Added content               \\\hline
 
\end{tabular}

\pagebreak

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% TABLE OF CONTENTS AND FIGURES

\tableofcontents
\pagebreak


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% MAIN DOCUMENT
\setcounter{page}{1}     % Set page number counter
\renewcommand{\thepage}{\arabic{page}}  % print page number as arabic

%%%%%%%%%%%%%%  THIS IS WHERE YOU PUT YOUR CONTENT %%%%%%%%%%%%%%%%%%

\section{Executive Summary}


\section{Requirements}
Our requirements reflect on the core business scope we set for this project: to develop a point of sale system which has functionality that will assist businesses in managing the logistics
involved in selling their products or services. 
\\\\
This is broken down into 4 main core functionality of the system;  Accurate Stock Control management, Instantaneous Customer Services, Sales and inventory reporting and lastly, a Safe and encrypted system . This is reflected in our goal requirements and is largely unchanged since the initial requirements report. 
\\\\
However, many domain level and product level requirements were revised over the course of this project. The main reason is to include more detail into our requirements to better reflect our system, and secondly to add in new and innovative feature to our system for a more enjoyable experience for our stakeholders while using our system. 
\\\\
In the requirements listed below, the number colour show if it is a functional requirement \textcolor{black}{(Black)} or a non functional requirement \textcolor{blue} {(Blue)}. There are also brackets next to the description to label the requirement to be either a core part of the system ([core]) or an extension of a system ([extension]). In the given prototype, all extensions have been implemented, but clients have an option to opt out various extension functionality and the core part of the system will still work without omission. Following that is the page number link to the event-B code and the Ruby on Rails code in the appendix.
\\\\
\textbf{Key:}\\
\textcolor{black}{black} = Functional Requirements\\
\textcolor{blue} {Blue} = Non-Functional Requirements\\

\subsection{Goal-Level Requirements}

%% DON'T FORGET TO ADD A SUITABLE NARATIVE TO EXPLAIN WHAT YOUR
%% REQUIREMENTS ARE.

\begin{longtable}{|l|p{5cm}|p{7cm}|p{0.5cm}|p{0.5cm}|}
  \caption{Table of Goal-Level Requirements}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}}  &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \textbf{Short Description}&
  \textbf{EB} & 
  \textbf{RR}\\
  \hline\hline
  \endfirsthead
  \caption[]{Table of Goal-Level Requirements \textit{Continued}}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}} &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \multicolumn{1}{|c|}{\textbf{Short Description}} & 
  \multicolumn{1}{|c|}{\textbf{E}} & 
  \multicolumn{1}{|c|}{\textbf{R}}\\
  \hline\hline
  \endhead
  \hline
  \multicolumn{3}{r}{\textit{continued on next page\ldots}}\\
  \endfoot
  \hline
  \endlastfoot
  %% List all your Goal-Level requirements here
  \textcolor{black}{GL-1}  &  To build a system that will manage Stock Control     & \textbf{[Core] }The system must have the ability to alter the stock levels, and relocate stock to the correct locations, somewhat autonomously. & 10 & 10 \\
  \hline
 \textcolor{black}{ GL-2}  &  To build a system that will provide users with functionality to support Customer Service & \textbf{[Core] }The system must provide a set of features which will enable the user to perform task associated with customer service & 10 & 10\\
  \hline
  \textcolor{black}{GL-3}  &  To build a system capable of reporting & \textbf{[Extension] }The system will generate different kinds of reports including productivity and sales & 10 & 10 \\
  \hline
  \textcolor{black}{GL-4}  &  Maintain business functionality &  \textbf{[Core] }The system must be intuitive and secure, allowing multiple levels of authentication with minimal learning curve to maximise profits.& 10 & 10 \\
  \hline
\end{longtable}

\pagebreak
\subsection{Domain-Level Requirements}

\begin{longtable}{|l|p{5cm}|p{7cm}|p{0.5cm}|p{0.5cm}|}
  \caption{Table of Domain-Level Requirements}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}}  &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \textbf{Short Description}&
  \textbf{EB} & 
  \textbf{RR}\\
  \hline\hline
  \endfirsthead
  \caption[]{Table of Domain-Level Requirements \textit{Continued}}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}} &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \multicolumn{1}{|c|}{\textbf{Short Description}} & 
  \multicolumn{1}{|c|}{\textbf{E}} & 
  \multicolumn{1}{|c|}{\textbf{R}}\\
  \hline\hline
  \endhead
  \hline
  \multicolumn{3}{r}{\textit{continued on next page\ldots}}\\
  \endfoot
  \hline
  \endlastfoot
  %% List all your Domain-Level requirements here
  \textcolor{black}{DN-1.1} & The system should provide the capability to modify the current stock data. & \textbf{[Core] }The system will be able to modify quantities of each particular stock. This includes creation and deletion of products, changing product details, changing location stock levels.& 10 & 10\\
  \textcolor{black}{DN-1.2} &  To provide a system which can log damage, loss, and theft & \textbf{[Extension] }Essentially staff can put in the affected stock and its state, by which the system will record it and make necessary updates to stock states. Also any ’stolen’ or ’missing’ items can be resolved by staff if they are recovered.  & 10 & 10\\
  \textcolor{black}{DN-1.3} & Support faults and returns of Products in the system.  & \textbf{[Core] }Sometimes manufacturers can ship faulty products. The system should be able log when such an event occurs and assist in returning such products.& 10 & 10\\
  \textcolor{black}{DN-1.4} & Handle reordering and relocation of stock. & \textbf{[Core] }When floor stock levels for any product falls below a specified threshold, the system should automatically be able to request extra stock from a warehouse or another location.& 10 & 10\\
    \textcolor{black}{DN-1.5} & The system must handel various stock locations. & \textbf{[Core] }The system should support the creation, modification of various stock levels in the business. This includes backroom, warehouse etc.& 10 & 10\\
  \hline
  \textcolor{black}{DN-2.1} &  Must support Orders and Sales throughout the system. & \textbf{[Core] }This deals with the inventory side of orders and sales. Ability to create and handle orders/sales within the system, while update stock levels and income into the system.& 10 & 10\\
  \textcolor{black}{DN-2.2} &  The system must be capable of refunding and or exchange items within the system & \textbf{[Core] }This requirement allows such processes as exchange of stock for store credit, updates stock level as appropriate, refunds for returns, and the ability to recalculate a customer's total bill.& 10 & 10\\
  \textcolor{black}{DN-2.3} & The system must be able to process payments, Billings and Transactions & \textbf{[Core] }The payments system will be outsourced however out system must be able to provide the appropriate information and update the appropriate revenue while maintaining confidentiality.& 10 & 10\\
  \textcolor{black}{DN-2.4} & Provide a system which allows for individual customer accounts & \textbf{[Extension] }The system will allow for the creation of customer accounts, and support adjustments of customer details. It will also support a loyalty program and apply various discounts.& 10 & 10\\
  \hline
  \textcolor{black}{DN-3.1} &  Include the ability to report on stocks & \textbf{[Extension] }Ability to report on stock quantities, report on how much stock has gone in and out of a location, alert for high and low stock levels.& 10 & 10\\
  \textcolor{black}{DN-3.2} & The system must have the ability to provide sales reports for management. & \textbf{[Extension] }Sales reports are generated from current stock levels, as well as history of sales, and supplier orders, sales in particular period based on product category,
leading and trailing product sales and profitability, total sales based on location. & 10 & 10\\
\textcolor{black}{DN-3.3} & The system must have the ability to report on system users. & \textbf{[Extension] }User reports includes employee reports and also customer reports. It is also able to generate employee detail reports and various other useful reports regarding users.& 10 & 10\\
\hline
  \textcolor{black}{DN-4.1} &  Support user authentication and multiple levels of authorisation & \textbf{[Core] }The system will include functionality to allow users of the system to authenticate and contain various levels of access control.& 10 & 10\\
  \textcolor{blue} {DN-4.2} &  Provide user support. & \textbf{[Extension] }Enable users to access documentation and support for the system on demand. & 10 & 10\\
  \textcolor{blue} {DN-4.3} &  The system must be reasonable in its response times to given actions & \textbf{[Extension] }The system must be able to respond quick enough that the business benefits from the use of the POS. & 10 & 10\\
  \textcolor{black} {DN-4.4} & The system must be stable in its completed state & \textbf{[Core] }Both in terms of system crashes, bugs and misinformation. This essentially outlines that the system must work as expected. & 10 & 10\\
\textcolor{blue}{DN-4.5} & The system will provide backup & \textbf{[Extension] }The system is able to provide both onsite and offsite backup for various data used in the system. & 10 & 10\\
  \hline
\end{longtable}

\pagebreak

\subsection{Product-Level Requirements}
\begin{longtable}{|l|p{5cm}|p{7cm}|p{0.5cm}|p{0.5cm}|}
  \caption{Table of Product-Level Requirements}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}}  &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \textbf{Short Description}&
  \textbf{EB} & 
  \textbf{RR}\\
  \hline\hline
  \endfirsthead
  \caption[]{Table of Product-Level Requirements \textit{Continued}}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}} &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \multicolumn{1}{|c|}{\textbf{Short Description}} & 
  \multicolumn{1}{|c|}{\textbf{E}} & 
  \multicolumn{1}{|c|}{\textbf{R}}\\
  \hline\hline
  \endhead
  \hline
  \multicolumn{3}{r}{\textit{continued on next page\ldots}}\\
  \endfoot
  \hline
  \endlastfoot
 %% List all your Product-Level requirements here
\textcolor{black}{PD-1.1.1} & Ability to add/remove stock from a location. & \textbf{[Core] }Stock can be rearranged from different locations i.e. when stock levels are low on the floor stock should be moved from the store rooms or the warehouse. & 10 & 10\\
\textcolor{black}{PD-1.1.2} & Add new products to the database & \textbf{[Core] }When the store decides to sell a new product, the staff should be able to enter the product into the system, and record any relevant details. & 10 & 10\\
\textcolor{black}{PD-1.1.3} & Update a products details & \textbf{[Core] }The products recorded in the system should be editable. For example, current stock levers, unit price, product description, etc.& 10 & 10\\
\textcolor{black}{PD-1.1.4} & Remove a product from the system & \textbf{[Core] }If the store decides to discontinue the sale of a particular product, functionality to remove it will be provided so that the system will cease to manage the stock.& 10 & 10\\
\textcolor{black}{PD-1.1.5} & System should allow change in product's to be activation status & \textbf{[Core] }Authorised Staff member should be able to activate or deactivate a product.& 10 & 10\\
\hline
\textcolor{black}{PD-1.2.1} & Log an item as lost or stolen & \textbf{[Extension] }Ability to log if any item that is managed by the system is lost or stolen. This information can then be included in the various reports that are generated by the system.& 10 & 10\\
\textcolor{black}{PD-1.2.2} & Resolve an item previously reported as lost & \textbf{[Extension] }If a lost or stolen item is found, the the system will be able to take that data and cancel any actions it may have commenced in response to it being missing.& 10 & 10\\
\hline
\textcolor{black}{PD-1.3.1} & Ability to report faulty or damaged items received from suppliers & \textbf{[Extension] }If an item is received from a supplier is found to be faulty, then allow such an instance to be logged within the system so that it can be dealt with appropriately.& 10 & 10\\
\textcolor{black}{PD-1.3.2} & Warranties and repairs for sold items & \textbf{[Extension] }Log and track when an item is brought back for repairs and include any current warranty status.& 10 & 10\\
\hline
\textcolor{black}{PD-1.4.1} & Function to order new stock from supplier & \textbf{[Core] }When stock is below the threshold for warehouse stock, a purchase order must be placed with the respective supplier.& 10 & 10\\
\textcolor{black}{PD-1.4.2} & Ability to request stock from other locations & \textbf{[Core] }When stock is below the threshold at a particular location (e.g. on the floor, in back store room, or from the warehouse), the system must be able to relocate it to the relevant place.& 10 & 10\\
\textcolor{black}{PD-1.4.3} & Ability to edit and cancel a stock order & \textbf{[Core] }If an order is placed within the system, an authorised staff member can edit the order while the order is still in progress or even cancel the order overall. For example A spot sale of item X was very well received by customers and sells out quickly. The duty manager raises an urgent replenishment request for item X through the PoSWare system, which then sets in train an extraordinary delivery.& 10 & 10\\
\textcolor{black}{PD-1.4.4} & Allow stock level thresholds to be set & \textbf{[Core] }Allow an authorised user to set the stock level threshold for an item. For example, item X should have a minimum threshold of m and a maximum threshold of n on the store's floor shelves.& 10 & 10\\
\hline
\textcolor{black}{PD-1.5.1} & Ability to add new stock location & \textbf{[Core] }Stock location can be created when new warehouse/ store is used. Authorised staff should be able to create new stock location and record any relevant details.& 10 & 10\\
\textcolor{black}{PD-1.5.2} & Ability to edit stock location & \textbf{[Core] }Stock location's name,threshold amount and other details can be modified .& 10 & 10\\
\textcolor{black}{PD-1.5.3} & Ability to delete stock location & \textbf{[Core] }Stock location can be deleted, but stock location must have 0 stock left in order for it to be able to be deleted.& 10 & 10\\

\hline
\textcolor{black}{PD-2.1.1} & The system will allow customers to place products in an cart & \textbf{[Core] }Customers can place a set of products in the cart for purchasing.& 10 & 10\\
\textcolor{black}{PD-2.1.2} & The system will be able to process the sale of goods and updating the appropriate stock levels & \textbf{[Core] }When a product is sold, the system will reduce stock levels of the particular product. If stock level then falls below a predetermined threshold, triggers relevant actions within the system.& 10 & 10\\
\textcolor{black}{PD-2.1.3} & The system will calculate total purchasing price of stock & \textbf{[Core] }Calculates the cost of the purchased items in stock, including the ability to account for any specials on the item being purchased.& 10 & 10\\
\textcolor{black}{PD-2.1.4} & The system will able to operate by multiple users in multiple terminals & \textbf{[Core] }the system should be able to support multiple users accessing the database at the same time.& 10 & 10\\
\textcolor{black}{PD-2.1.5} & The system should allow user to edit or remove products from carts & \textbf{[Core] }Users can edit or remove individual products from the cart list before the transaction is gone through. This includes changing the amount, or removing a product from the order.& 10 & 10\\
\hline
\textcolor{black}{PD-2.2.1} & Refund provision for returned stock & \textbf{[Core] }When stock is returned and is still in purchasable condition, it may be added back to the current stock.& 10 & 10\\
\textcolor{black}{PD-2.2.2} & The system will handle exchange of stock for store credit & \textbf{[Extension] }The value of the item may be credited to a user’s account or next purchase after a valid return of the product.& 10 & 10\\
\textcolor{black}{PD-2.2.3} & The system will handle exchange of stock for cash refund & \textbf{[Core] }The item may be returned and exchanged for cash where applicable.& 10 & 10\\
\hline
\textcolor{black}{PD-2.3.1} & The system will have a customer payment system for orders and sales & \textbf{[Core] }The payment will be validated and then recorded as a transaction within the system. & 10 & 10\\
\textcolor{black}{PD-2.3.2} & The system will be able to update revenue as sales are made & \textbf{[Core] }Records of the sales and transactions are consolidated within the system. & 10 & 10\\
\textcolor{black}{PD-2.3.3} & The system will be able to update tax(GST) as sales are made & \textbf{[Core] } tax will be calculated and apply to sales and ordering. & 10 & 10\\
\hline
\textcolor{black}{PD-2.4.1} & The system will be able to allocate membership discounts to appropriate customers & \textbf{[Extension] }Where applicable for certain loyalty memberships discounts will be applied to their transactions. & 10 & 10\\
\textcolor{black}{PD-2.4.2} & The system will handle customer account creation & \textbf{[Extension] }Users will be able to create a new account for a customer. & 10 & 10\\
\textcolor{black}{PD-2.4.3} & The system will allow the revision of a customer’s details of customer account& \textbf{[Extension] }Customers with accounts will be able to edit their contact details, as well as any subscriptions and discounts within their account. System also have the ability to change the discount level for users. & 10 & 10\\
\textcolor{black}{PD-2.4.4} & The system will allow cancellation of customer account& \textbf{[Extension] } Customers also have the option of deleting or deactivating their account if needed be. & 10 & 10\\
\textcolor{black}{PD-2.4.4} & The system will have the functionality to remove a customer & \textbf{[Extension] }If a customer wishes to no longer take part in any programs offered by the store, there should be a way to disable that customer account in the system.& 10 & 10\\
\hline
\textcolor{black}{PD-3.1.1} & The system allows reporting on loss/damages/theft based on cause & \textbf{[Extension] }When an item is reported as lost, stolen or damaged, there should also be a way of reporting the exact cause and (optionally) who is responsible so that it may be included in reports generated by the system.& 10 & 10\\
\textcolor{black}{PD-3.1.2} & The system needs to be capable of generating reports based on products & \textbf{[Extension] }At the request of a manager (or anyone with sufficient privileges), the system should be able to generate a report outlining the amount of products in inventory.& 10 & 10\\
\hline
\textcolor{black}{PD-3.2.1} & The system needs to be capable of generating reports based on sales & \textbf{[Extension] }At the request of a manager (or anyone with sufficient privileges), the system should be able to generate a report outlining the amount of sales each product has.& 10 & 10\\
\textcolor{black}{PD-3.2.2} & The system needs to be capable of generating financial reports & \textbf{[Extension] }At the request of a manager (or anyone with sufficient privileges), the system should be able to generate a standard financial report outlining the revenue and profit of the company/ individual store.& 10 & 10\\
\hline
\textcolor{black}{PD-3.3.1} & The system needs to be capable of generating reports based on customers & \textbf{[Extension] }At the request of a manager (or anyone with sufficient privileges), the system should be able to generate a report outlining the customer, their amount purchased and membership type.& 10 & 10\\
\textcolor{black}{PD-3.3.2} & The system needs to be capable of generating reports based on employees & \textbf{[Extension] }At the request of a manager (or anyone with sufficient privileges), the system should be able to generate a report outlining the employees of the business along with the number of sales they made and amount of sales they made.& 10 & 10\\
\hline
\textcolor{black}{PD-4.1.1} & User Authentication and creation& \textbf{[Core] }Ability for a user to be created and also easily login to the system with their credentials so that their authorisation level may be determined.First user (usually owner) should be created by default& 10 & 10\\
\textcolor{black}{PD-4.1.2} & Provide various levels of access control to the system. & \textbf{[Core] }Create ACLs to restrict functionality to specified groups of users. For example, a customer should not be able to modify the price of a product.& 10 & 10\\
\textcolor{black} {PD-4.1.3} & Allow modification of access rights & \textbf{[Core] }The rights defined in the previous requirement should be modifiable by someone with sufficient rights. For example, if a cashier gets promoted to a manager, they will now have access to more functions within the system.& 10 & 10\\
\textcolor{blue} {PD-4.2.2} & The system includes help documentation outlining its operation & \textbf{[Core] }Provide a useful interface in such a way that help is accessible at any point while using the system.& 10 & 10\\
\hline
 \hline
\end{longtable}
\pagebreak

\subsection{Design-Level Requirements}

%% DON'T FORGET TO ADD A SUITABLE NARATIVE TO EXPLAIN WHAT YOUR
%% REQUIREMENTS ARE.

\begin{longtable}{|l|p{5cm}|p{7cm}|p{0.5cm}|p{0.5cm}|}
  \caption{Table of Design-Level Requirements}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}}  &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \textbf{Short Description}&
  \textbf{EB} & 
  \textbf{RR}\\
  \hline\hline
  \endfirsthead
  \caption[]{Table of Design-Level Requirements \textit{Continued}}\\
  \hline
  \multicolumn{1}{|c|}{\textbf{ReqID}} &
  \multicolumn{1}{|c|}{\textbf{Requirement}} &
  \multicolumn{1}{|c|}{\textbf{Short Description}} & 
  \multicolumn{1}{|c|}{\textbf{E}} & 
  \multicolumn{1}{|c|}{\textbf{R}}\\
  \hline\hline
  \endhead
  \hline
  \multicolumn{3}{r}{\textit{continued on next page\ldots}}\\
  \endfoot
  \hline
  \endlastfoot
  %% List all your Goal-Level requirements here
  
\textcolor{black}{DZ-2.1.1.1}  &  Barcode recognition     & \textbf{[Core] }The barcode recognition system must comply with the ISO/IEC 15426-1 (linear) or ISO/IEC 15426-2 (2D).& 10 & 10\\
  \hline
  \textcolor{black}{DZ-4.2.2.1}  &  Easily accessible help button     & \textbf{[Core] }The system should have built in support, and should have an intuitive way of allowing users to access it from any point within the system.& 10 & 10\\
  \hline
 \hline
\end{longtable}

\pagebreak






\section{Specification}

\section{Design}
\section{Review and Assessment of prototype implementation}
\pagebreak
\section{Discussion of possible physical deployment}
\pagebreak
\section{Assessment of development process}
\pagebreak
\section{Project management}
\pagebreak
\section{Special features}
\pagebreak
\section{Reflections and Introspection}
\pagebreak


\section{Appendix}


\subsection{Event-B Model}

%% Note
% It is possible to interleave the model with the discussion
% To do this the LaTeX-ed Event-B models would need to be
% broken into pieces.  Each piece should be inside a

% \begin{description}
% \MACHINE{myConstruct}
% ...
% \END
% \end{description}

% For more details/instructions please read:
%    eventB-markup.pdf

% You can insert page breaks at points in the machine/context by
% inserting \clearpage commands.

\begin{description}
\subsubsection{Stock\_ctx}
\CONTEXT{Stock\_ctx}
\cmt{ Defines a product and stock location }
\SETS
	\begin{description}
		\Item{ PRODUCT }
		\Item{ STOCK\_LOCATION }
	\end{description}
\CONSTANTS
	\begin{description}
		\Item{ Floor }
		\Item{ Backroom }
		\Item{ Warehouse }
		\Item{ thresholdmax }
	\end{description}
\AXIOMS
	\begin{description}
		\nItemX{ axm1 }{ finite(PRODUCT) }
		\nItemX{ axm2 }{ partition(STOCK\_LOCATION,\{ Floor\} ,\{ Backroom\} ,\{ Warehouse\} ) }
		\nItemX{ axm3 }{ thresholdmax\in \nat }
	\end{description}
\END
\end{description}

\begin{description}
\subsubsection{Stock\_ctx\_R0}
\CONTEXT{Stock\_ctx\_R0}
\cmt{ Defines users and userprivileges }
\EXTENDS{Stock\_ctx}
\SETS
	\begin{description}
		\Item{ USERS }
		\Item{ USER\_PRIVILEGE }
	\end{description}
\CONSTANTS
	\begin{description}
		\Item{ Cashier }
		\Item{ Stock\_Control }
		\Item{ Manager }
		\Item{ Owner }
	\end{description}
\AXIOMS
	\begin{description}
		\nItemX{ axm1 }{ finite(USERS) }
		\nItemX{ axm2 }{ partition(USER\_PRIVILEGE,\{ Cashier\} ,\{ Stock\_Control\} ,\{ Manager\} ,\{ Owner\} ) }
		\cmt{ PD-4.1.2 - Provide various levels of access control to the system. }
	\end{description}
\END
\end{description}

\begin{description}
\pagebreak
\subsubsection{Stock\_ctx\_R1}
\CONTEXT{Stock\_ctx\_R1}
\EXTENDS{Stock\_ctx\_R0}
\SETS
	\begin{description}
		\Item{ ORDER\_STATUS }
	\end{description}
\CONSTANTS
	\begin{description}
		\Item{ Created }
		\Item{ Completed }
		\Item{ Delivering }
	\end{description}
\AXIOMS
	\begin{description}
		\nItemX{ axm1 }{ partition(ORDER\_STATUS, \{ Created\} ,\{ Delivering\} ,\{ Completed\} ) }
	\end{description}
\END
\end{description}

\begin{description}
\subsubsection{Stock\_ctx\_R2}
\CONTEXT{Stock\_ctx\_R2}
\EXTENDS{Stock\_ctx\_R1}
\SETS
	\begin{description}
		\Item{ MEMBERS }
		\Item{ TRANSACTIONTYPE }
	\end{description}
\CONSTANTS
	\begin{description}
		\Item{ CART }
		\Item{ emptycart }
		\Item{ ADDINGTOCART }
		\Item{ CHECKINGOUT }
		\Item{ FINISHED }
	\end{description}
\AXIOMS
	\begin{description}
		\nItemX{ axm1 }{ CART = PRODUCT \pfun  \nat }
		\nItemX{ axm2 }{ emptycart = PRODUCT \cprod  \{ 0\}  }
		\nItemX{ axm3 }{ partition(TRANSACTIONTYPE, \{ ADDINGTOCART\} ,\{ CHECKINGOUT\} ,\{ FINISHED\} ) }
	\end{description}
\END
\end{description}

\begin{description}
\pagebreak
\subsubsection{StockControl}
\MACHINE{StockControl}
\cmt{ DN-1.1 - The base machine focuses on the systems ability to provide the capability to modify the current stock data. }
\SEES{Stock\_ctx}
\VARIABLES
	\begin{description}
		\Item{ products }
		\bcmt{ the set of all products in the system }
		\Item{ productprice }
		\bcmt{ the set of all product prices }
		\Item{ productthreshold }
		\bcmt{ the set of all product thresholds }
		\Item{ productlevels }
		\bcmt{ the set of all product levels }
		\Item{ activeProducts }
		\bcmt{ the set of currently activated products }
	\end{description}
\INVARIANTS
	\begin{description}
		\nItemX{ inv1 }{ products \subseteq  PRODUCT }
		\nItemX{ inv2 }{ productprice \in  products \tfun  \nat }
		\nItemX{ inv5 }{ productthreshold \in  products \tfun  (STOCK\_LOCATION \tfun  \nat) }
		\nItemX{ inv7 }{ productlevels \in  products \tfun (STOCK\_LOCATION \tfun  \nat) }
		\nItemX{ inv8 }{ activeProducts \subseteq  products }
		\nItemX{ inv9 }{ \forall p,l \qdot  p\in  activeProducts \land  l \in  STOCK\_LOCATION \limp  productlevels(p)(l) \geq  productthreshold(p)(l) }
		\nItemX{ inv10 }{ \forall p,l \qdot  p\in  products\setminus activeProducts \land  l \in  STOCK\_LOCATION \limp  productlevels(p)(l) = 0 }
		\nItemX{ inv11 }{ finite(products) }
		\nItemX{ inv12 }{ finite(activeProducts) }
		\nItemX{ inv13 }{ \forall p,l \qdot  p\in  products \land  l \in  STOCK\_LOCATION \limp  productlevels(p)(l) \in \nat }
		\nItemX{ inv14 }{ \forall p,l \qdot  p\in  products \land  l \in  STOCK\_LOCATION \limp  productthreshold(p)(l) \in \nat }
	\end{description}
\EVENTS
	\INITIALISATION
		\begin{description}
		\BeginAct
			\begin{description}
			\nItemX{ act1 }{ products :=  \emptyset  }
			\nItemX{ act2 }{ productprice :=  \emptyset  }
			\nItemX{ act3 }{ productthreshold :=  \emptyset  }
			\cmt{ individual product thresholds }
			\nItemX{ act4 }{ productlevels :=  \emptyset  }
			\cmt{ individual product levels }
			\nItemX{ act5 }{ activeProducts :=  \emptyset  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewProduct}
	\cmt{ PD-1.1.2 Add new product to the database }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ price }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  PRODUCT\setminus products }
			\nItemX{ grd2 }{ price \in  \nat }
			\nItemX{ grd3 }{ product \notin  activeProducts }
			\nItemX{ grd4 }{ product \notin  products }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ products :=  products \bunion  \{ product\}  }
			\nItemX{ act2 }{ productprice(product) :=  price }
			\nItemX{ act4 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItemX{ act5 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateProduct}
	\cmt{ PD-1.1.3 Update a products details }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ price }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  products }
			\nItemX{ grd2 }{ price \in  \nat }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productprice(product) :=  price }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ floor }
			\ItemX{ backroom }
			\ItemX{ warehouse }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ floor \in  1\upto productlevels(product)(Floor) }
			\nItemX{ grd3 }{ backroom \in  1\upto productlevels(product)(Backroom) }
			\nItemX{ grd4 }{ warehouse \in  1\upto productlevels(product)(Warehouse) }
			\nItemX{ grd5 }{ productlevels(product)(Floor) \geq  floor }
			\nItemX{ grd6 }{ productlevels(product)(Backroom) \geq  backroom }
			\nItemX{ grd7 }{ productlevels(product)(Warehouse) \geq  warehouse }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productthreshold(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductLevel}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ floor }
			\ItemX{ backroom }
			\ItemX{ warehouse }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ floor \in  productthreshold(product)(Floor)\upto thresholdmax }
			\nItemX{ grd3 }{ backroom \in  productthreshold(product)(Backroom)\upto thresholdmax }
			\nItemX{ grd4 }{ warehouse \in  productthreshold(product)(Warehouse)\upto thresholdmax }
			\nItemX{ grd5 }{ floor \geq  productthreshold(product)(Floor) }
			\nItemX{ grd6 }{ backroom \geq  productthreshold(product)(Backroom) }
			\nItemX{ grd7 }{ warehouse \geq  productthreshold(product)(Warehouse) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ amount }
			\ItemX{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd2 }{ product \in  activeProducts }
			\nItemX{ grd1 }{ amount \in  1\upto (productlevels(product)(Backroom) -  productthreshold(product)(Backroom)) }
			\nItemX{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + amount }
			\nItemX{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + amount),Backroom \mapsto  (productlevels(product)(Backroom) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ amount }
			\ItemX{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd2 }{ product \in  activeProducts }
			\nItemX{ grd1 }{ amount \in  1\upto (productlevels(product)(Warehouse) -  productthreshold(product)(Warehouse)) }
			\nItemX{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + amount }
			\nItemX{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + amount),Warehouse \mapsto  (productlevels(product)(Warehouse) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ amount }
			\ItemX{ location }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ amount \in  1\upto (productlevels(product)(location) -  productthreshold(product)(location)) }
			\nItemX{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItemX{ grd4 }{ productlevels(product)(location) \geq  productthreshold(product)(location) + amount }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ amount }
			\ItemX{ location }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ amount \in  \nat_1 }
			\nItemX{ grd3 }{ location \in  STOCK\_LOCATION }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) + amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  products }
			\nItemX{ grd2 }{ product \notin  activeProducts }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ activeProducts :=  activeProducts \bunion  \{ product\}  }
			\nItemX{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItemX{ act3 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateProduct}
	\cmt{ PD-1.1.4 Remove a product from the system }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ product \in  products }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ activeProducts :=  activeProducts\setminus \{ product\}  }
			\nItemX{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
\END
\end{description}

\begin{description}
\pagebreak
\subsubsection{StockControl\_R0}
\MACHINE{StockControl\_R0}
\cmt{ DN-4.1 - This refinement is concerned with user authentication and multiple levels of authorisation }
\REFINES{StockControl}
\SEES{Stock\_ctx\_R0}
\VARIABLES
	\begin{description}
		\Item{ products }
		\Item{ productprice }
		\Item{ productthreshold }
		\Item{ productlevels }
		\Item{ activeProducts }
		\Item{ users }
		\Item{ userPrivileges }
	\end{description}
\INVARIANTS
	\begin{description}
		\nItemX{ inv1 }{ users \subseteq  USERS }
		\nItemX{ inv2 }{ userPrivileges \in  users \tfun  USER\_PRIVILEGE }
	\end{description}
\EVENTS
	\INITIALISATION
		\\\textit{extended}
		\begin{description}
		\BeginAct
			\begin{description}
			\nItem{ act1 }{ products :=  \emptyset  }
			\nItem{ act2 }{ productprice :=  \emptyset  }
			\nItem{ act3 }{ productthreshold :=  \emptyset  }
			\cmt{ individual product thresholds }
			\nItem{ act4 }{ productlevels :=  \emptyset  }
			\cmt{ individual product levels }
			\nItem{ act5 }{ activeProducts :=  \emptyset  }
			\nItemX{ act6 }{ users :=  \emptyset  }
			\nItemX{ act7 }{ userPrivileges :=  \emptyset  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewUser}
	\cmt{ PD-4.1.1 - Provide User Authentication \& PD-4.1.2 - Provide various levels of access control to the system. }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ user }
			\ItemX{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ user \in  USERS\setminus users }
			\nItemX{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ users :=  users \bunion  \{ user\}  }
			\nItemX{ act2 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditUserPriveleges}
	\cmt{ PD-4.1.3 - Allow modification of access rights }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ user }
			\ItemX{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ user \in  users }
			\nItemX{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewProduct}
	\cmt{ PD-1.1.2 Add new product to the database }
	\EXTD {NewProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  PRODUCT\setminus products }
			\nItem{ grd2 }{ price \in  \nat }
			\nItem{ grd3 }{ product \notin  activeProducts }
			\nItem{ grd4 }{ product \notin  products }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ products :=  products \bunion  \{ product\}  }
			\nItem{ act2 }{ productprice(product) :=  price }
			\nItem{ act4 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act5 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateProduct}
	\cmt{ PD-1.1.3 Update a products details }
	\EXTD {UpdateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ price \in  \nat }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productprice(product) :=  price }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  1\upto productlevels(product)(Floor) }
			\nItem{ grd3 }{ backroom \in  1\upto productlevels(product)(Backroom) }
			\nItem{ grd4 }{ warehouse \in  1\upto productlevels(product)(Warehouse) }
			\nItem{ grd5 }{ productlevels(product)(Floor) \geq  floor }
			\nItem{ grd6 }{ productlevels(product)(Backroom) \geq  backroom }
			\nItem{ grd7 }{ productlevels(product)(Warehouse) \geq  warehouse }
			\nItemX{ grd8 }{ user \in  users }
			\nItemX{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productthreshold(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductLevel}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {SetProductLevel}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  productthreshold(product)(Floor)\upto thresholdmax }
			\nItem{ grd3 }{ backroom \in  productthreshold(product)(Backroom)\upto thresholdmax }
			\nItem{ grd4 }{ warehouse \in  productthreshold(product)(Warehouse)\upto thresholdmax }
			\nItem{ grd5 }{ floor \geq  productthreshold(product)(Floor) }
			\nItem{ grd6 }{ backroom \geq  productthreshold(product)(Backroom) }
			\nItem{ grd7 }{ warehouse \geq  productthreshold(product)(Warehouse) }
			\nItemX{ grd8 }{ user \in  users }
			\nItemX{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Backroom) -  productthreshold(product)(Backroom)) }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + amount }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + amount),Backroom \mapsto  (productlevels(product)(Backroom) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Warehouse) -  productthreshold(product)(Warehouse)) }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + amount }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + amount),Warehouse \mapsto  (productlevels(product)(Warehouse) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {RemoveStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto (productlevels(product)(location) -  productthreshold(product)(location)) }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ productlevels(product)(location) \geq  productthreshold(product)(location) + amount }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE \limp  location = Floor }
			\nItemX{ grd7 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  \limp  location \in  STOCK\_LOCATION }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  \nat_1 }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItemX{ grd4 }{ user \in  users }
			\nItemX{ grd5 }{ location = Floor \limp  userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItemX{ grd6 }{ location \in  STOCK\_LOCATION\setminus \{ Floor\}  \limp  userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) + amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateProduct}
	\EXTD {ActivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ product \notin  activeProducts }
			\nItemX{ grd3 }{ user \in  users }
			\nItemX{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts \bunion  \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateProduct}
	\cmt{ PD-1.1.4 Remove a product from the system }
	\EXTD {DeactivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  products }
			\nItemX{ grd3 }{ user \in  users }
			\nItemX{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts\setminus \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
\END
\end{description}

\begin{description}
\pagebreak
\subsubsection{StockControl\_R1}
\MACHINE{StockControl\_R1}
\cmt{ This focuses on adding DN-1.4 }
\REFINES{StockControl\_R0}
\SEES{Stock\_ctx\_R1}
\VARIABLES
	\begin{description}
		\Item{ products }
		\Item{ productprice }
		\Item{ productthreshold }
		\Item{ productlevels }
		\Item{ activeProducts }
		\Item{ users }
		\Item{ userPrivileges }
		\Item{ productmaxthreshold }
		\Item{ orders }
		\Item{ orderStatus }
	\end{description}
\INVARIANTS
	\begin{description}
		\nItemX{ inv1 }{ productmaxthreshold \in  products \tfun  (STOCK\_LOCATION \tfun  \nat) }
		\nItemX{ inv2 }{ \forall p,l \qdot  p\in  activeProducts \land  l \in  STOCK\_LOCATION \limp  productmaxthreshold(p)(l) \geq  productthreshold(p)(l) }
		\nItemX{ inv3 }{ orders \in  activeProducts \pfun  \nat_1 }
		\nItemX{ inv4 }{ orderStatus \in  activeProducts \pfun  ORDER\_STATUS }
		\nItemX{ inv5 }{ \forall p \qdot  p \in  activeProducts \land  p \in  dom(orders) \limp  p \in  dom(orderStatus) }
	\end{description}
\EVENTS
	\INITIALISATION
		\\\textit{extended}
		\begin{description}
		\BeginAct
			\begin{description}
			\nItem{ act1 }{ products :=  \emptyset  }
			\nItem{ act2 }{ productprice :=  \emptyset  }
			\nItem{ act3 }{ productthreshold :=  \emptyset  }
			\cmt{ individual product thresholds }
			\nItem{ act4 }{ productlevels :=  \emptyset  }
			\cmt{ individual product levels }
			\nItem{ act5 }{ activeProducts :=  \emptyset  }
			\nItem{ act6 }{ users :=  \emptyset  }
			\nItem{ act7 }{ userPrivileges :=  \emptyset  }
			\nItemX{ act8 }{ productmaxthreshold :=  \emptyset  }
			\nItemX{ act9 }{ orders :=  \emptyset  }
			\nItemX{ act10 }{ orderStatus :=  \emptyset  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\REF {MoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd2 }{ product \in  activeProducts }
			\nItemX{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + 1 }
			\nItemX{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItemX{ grd7 }{ productlevels(product)(Floor) \leq  productmaxthreshold(product)(Floor) }
			\end{description}
		\Witnesses
			\begin{description}
			\nItem{ amount }{ amount = 1 }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + 1),Backroom \mapsto  (productlevels(product)(Backroom) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\REF {MoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd2 }{ product \in  activeProducts }
			\nItemX{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + 1 }
			\nItemX{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItemX{ grd7 }{ productlevels(product)(Backroom) \leq  productmaxthreshold(product)(Backroom) }
			\end{description}
		\Witnesses
			\begin{description}
			\nItem{ amount }{ amount = 1 }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + 1),Warehouse \mapsto  (productlevels(product)(Warehouse) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductMaxThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ location }
			\ItemX{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ amount \in  1\upto thresholdmax }
			\nItemX{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItemX{ grd5 }{ productlevels(product)(location) \leq  amount }
			\nItemX{ grd12 }{ productthreshold(product)(location) \leq  amount }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productmaxthreshold(product) :=  productmaxthreshold(product) \ovl  \{ location \mapsto  amount\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewOrder}
	\cmt{ PD-1.4.1 - Function to order new stock from supplier }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\ItemX{ quantity }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ user \in  users }
			\nItemX{ grd3 }{ product \notin  dom(orders) }
			\nItemX{ grd4 }{ quantity \in  \nat_1 }
			\nItemX{ grd5 }{ product \notin  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ orders :=  orders \bunion  \{ product \mapsto  quantity\}  }
			\nItemX{ act2 }{ orderStatus :=  orderStatus \bunion  \{ product \mapsto  Created\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ quantity }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ quantity \in  1\upto thresholdmax }
			\nItemX{ grd3 }{ user \in  users }
			\nItemX{ grd4 }{ product \in  dom(orders) }
			\nItemX{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ orders :=  orders \ovl  \{ product \mapsto  quantity\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToDelivering}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ product \in  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Delivering\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToComplete}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ product \in  dom(orderStatus) }
			\nItemX{ grd3 }{ user \in  users }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Completed\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CompleteOrder}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\REF {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd4 }{ user \in  users }
			\nItemX{ grd5 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItemX{ grd6 }{ product \in  dom(orders) }
			\nItemX{ grd7 }{ product \in  dom(orderStatus) }
			\nItemX{ grd8 }{ orderStatus(product) = Completed }
			\end{description}
		\Witnesses
			\begin{description}
			\nItem{ location }{ location = Warehouse }
			\nItem{ amount }{ amount = orders(product) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Warehouse \mapsto  (productlevels(product)(Warehouse) + orders(product))\}  }
			\nItemX{ act2 }{ orders :=  \{ product\}  \domsub  orders }
			\nItemX{ act3 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CancelOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ product \in  dom(orders) }
			\nItemX{ grd3 }{ user \in  users }
			\nItemX{ grd4 }{ product \in  dom(orderStatus) }
			\nItemX{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ orders :=  \{ product\}  \domsub  orders }
			\nItemX{ act2 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewUser}
	\cmt{ PD-4.1.1 - Provide User Authentication }
	\EXTD {NewUser}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  USERS\setminus users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ users :=  users \bunion  \{ user\}  }
			\nItem{ act2 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditUserPriveleges}
	\cmt{ PD-4.1.3 - Allow modification of access rights }
	\EXTD {EditUserPriveleges}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewProduct}
	\cmt{ PD-1.1.2 Add new product to the database }
	\EXTD {NewProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  PRODUCT\setminus products }
			\nItem{ grd2 }{ price \in  \nat }
			\nItem{ grd3 }{ product \notin  activeProducts }
			\nItem{ grd4 }{ product \notin  products }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ products :=  products \bunion  \{ product\}  }
			\nItem{ act2 }{ productprice(product) :=  price }
			\nItem{ act4 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act5 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItemX{ act6 }{ productmaxthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateProduct}
	\cmt{ PD-1.1.3 Update a products details }
	\EXTD {UpdateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ price \in  \nat }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productprice(product) :=  price }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  1\upto productlevels(product)(Floor) }
			\nItem{ grd3 }{ backroom \in  1\upto productlevels(product)(Backroom) }
			\nItem{ grd4 }{ warehouse \in  1\upto productlevels(product)(Warehouse) }
			\nItem{ grd5 }{ productlevels(product)(Floor) \geq  floor }
			\nItem{ grd6 }{ productlevels(product)(Backroom) \geq  backroom }
			\nItem{ grd7 }{ productlevels(product)(Warehouse) \geq  warehouse }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItemX{ grd10 }{ productmaxthreshold(product)(Floor) \geq  floor }
			\nItemX{ grd11 }{ productmaxthreshold(product)(Warehouse) \geq  warehouse }
			\nItemX{ grd12 }{ productmaxthreshold(product)(Backroom) \geq  backroom }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productthreshold(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductLevel}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {SetProductLevel}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  productthreshold(product)(Floor)\upto thresholdmax }
			\nItem{ grd3 }{ backroom \in  productthreshold(product)(Backroom)\upto thresholdmax }
			\nItem{ grd4 }{ warehouse \in  productthreshold(product)(Warehouse)\upto thresholdmax }
			\nItem{ grd5 }{ floor \geq  productthreshold(product)(Floor) }
			\nItem{ grd6 }{ backroom \geq  productthreshold(product)(Backroom) }
			\nItem{ grd7 }{ warehouse \geq  productthreshold(product)(Warehouse) }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Backroom) -  productthreshold(product)(Backroom)) }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + amount }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + amount),Backroom \mapsto  (productlevels(product)(Backroom) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Warehouse) -  productthreshold(product)(Warehouse)) }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + amount }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + amount),Warehouse \mapsto  (productlevels(product)(Warehouse) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {RemoveStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto (productlevels(product)(location) -  productthreshold(product)(location)) }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ productlevels(product)(location) \geq  productthreshold(product)(location) + amount }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE \limp  location = Floor }
			\nItem{ grd7 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  \limp  location \in  STOCK\_LOCATION }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  \nat_1 }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ location = Floor \limp  userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItem{ grd6 }{ location \in  STOCK\_LOCATION\setminus \{ Floor\}  \limp  userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) + amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateProduct}
	\EXTD {ActivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ product \notin  activeProducts }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts \bunion  \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateProduct}
	\cmt{ PD-1.1.4 Remove a product from the system }
	\EXTD {DeactivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  products }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts\setminus \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItemX{ act3 }{ orders :=  \{ product\}  \domsub  orders }
			\nItemX{ act4 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
\END
\end{description}

\begin{description}
\pagebreak
\subsubsection{StockControl\_R2}
\MACHINE{StockControl\_R2}
\cmt{ DL 2.1 - Initial Purchasing and returns }
\REFINES{StockControl\_R1}
\SEES{Stock\_ctx\_R2}
\VARIABLES
	\begin{description}
		\Item{ products }
		\Item{ productprice }
		\Item{ productthreshold }
		\Item{ productlevels }
		\Item{ activeProducts }
		\Item{ users }
		\Item{ userPrivileges }
		\Item{ productmaxthreshold }
		\Item{ orders }
		\Item{ orderStatus }
		\Item{ till }
		\Item{ members }
		\Item{ carts }
		\Item{ transactionInProcess }
		\Item{ cartTotal }
		\Item{ reciepts }
		\Item{ returnArea }
		\Item{ memberBalance }
		\Item{ activeMembers }
	\end{description}
\INVARIANTS
	\begin{description}
		\nItemX{ inv1 }{ till \in  \nat }
		\nItemX{ inv2 }{ members \subseteq  MEMBERS }
		\nItemX{ inv3 }{ carts \in  members \pfun  CART }
		\nItemX{ inv4 }{ transactionInProcess \in  members \pfun TRANSACTIONTYPE  }
		\nItemX{ inv5 }{ cartTotal \in  members \pfun  \nat }
		\nItemX{ inv6 }{ reciepts \in  members \tfun  CART }
		\nItemX{ inv7 }{ returnArea \in  products \pfun  \nat }
		\nItemX{ inv8 }{ memberBalance \in  members \tfun  \nat }
		\nItemX{ inv9 }{ activeMembers \subseteq  members }
	\end{description}
\EVENTS
	\INITIALISATION
		\\\textit{extended}
		\begin{description}
		\BeginAct
			\begin{description}
			\nItem{ act1 }{ products :=  \emptyset  }
			\nItem{ act2 }{ productprice :=  \emptyset  }
			\nItem{ act3 }{ productthreshold :=  \emptyset  }
			\cmt{ individual product thresholds }
			\nItem{ act4 }{ productlevels :=  \emptyset  }
			\cmt{ individual product levels }
			\nItem{ act5 }{ activeProducts :=  \emptyset  }
			\nItem{ act6 }{ users :=  \emptyset  }
			\nItem{ act7 }{ userPrivileges :=  \emptyset  }
			\nItem{ act8 }{ productmaxthreshold :=  \emptyset  }
			\nItem{ act9 }{ orders :=  \emptyset  }
			\nItem{ act10 }{ orderStatus :=  \emptyset  }
			\nItemX{ act11 }{ till :\in  \nat }
			\nItemX{ act12 }{ members :=  \emptyset  }
			\nItemX{ act13 }{ carts :=  \emptyset  }
			\nItemX{ act14 }{ transactionInProcess :=  \emptyset  }
			\nItemX{ act15 }{ cartTotal :=  \emptyset  }
			\nItemX{ act16 }{ reciepts :=  \emptyset  }
			\nItemX{ act17 }{ returnArea :=  \emptyset  }
			\nItemX{ act18 }{ memberBalance :=  \emptyset  }
			\nItemX{ act19 }{ activeMembers :=  \emptyset  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveCreditToMemberAccount}
	\cmt{ PD-2.2.2 - The system will handle exchange of stock for store credit }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\ItemX{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  activeMembers }
			\nItemX{ grd2 }{ amount \in  1\upto memberBalance(member) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ memberBalance(member):= memberBalance(member)- amount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddCreditToMemberAccount}
	\cmt{ PD-2.2.2 - The system will handle exchange of stock for store credit }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\ItemX{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ amount \in  \nat }
			\nItemX{ grd2 }{ member \in  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ memberBalance(member) :=  memberBalance(member) + amount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateMembers}
	\cmt{ PD-2.4.4 - The system will have the functionality to remove a customer }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ activeMembers:=  activeMembers\setminus \{ member\}  }
			\nItemX{ act2 }{ memberBalance(member) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateMembers}
	\cmt{ PD-2.4.2 - The system will handle customer account creation }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  members\setminus activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ activeMembers :=  activeMembers \bunion  \{ member\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MovedReturnStock}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\REF {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd4 }{ user \in  users }
			\nItemX{ grd5 }{ userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItemX{ grd6 }{ product \in  dom(returnArea) }
			\nItemX{ grd7 }{ returnArea(product) \in  \nat_1 }
			\end{description}
		\Witnesses
			\begin{description}
			\nItem{ location }{ location = Floor }
			\nItem{ amount }{ amount = returnArea(product) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + returnArea(product))\}  }
			\nItemX{ act2 }{ returnArea(product) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ProceedToPayment}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  activeMembers }
			\nItemX{ grd2 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = CHECKINGOUT }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ transactionInProcess(member) :=  FINISHED }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ProcceedToCheckout}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  activeMembers }
			\nItemX{ grd2 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = ADDINGTOCART }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ transactionInProcess(member) :=  CHECKINGOUT }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewCart}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  activeMembers }
			\nItemX{ grd2 }{ member\notin dom(transactionInProcess) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ carts(member) :=  emptycart }
			\nItemX{ act2 }{ cartTotal(member) :=  0 }
			\nItemX{ act3 }{ transactionInProcess(member) :=  ADDINGTOCART }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CalculateTotalCart}
	\cmt{ PD-2.1.3 The system will calculate total purchasing price of stock }
	\REF {RemoveStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ user }
			\ItemX{ member }
			\ItemX{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd13 }{ member \in  dom(carts) }
			\nItemX{ grd9 }{ product \in  dom(carts(member)) }
			\nItemX{ grd2 }{ carts(member)(product) \in 1\upto (productlevels(product)(Floor) -  productthreshold(product)(Floor)) }
			\nItemX{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) + carts(member)(product) }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE }
			\nItemX{ grd7 }{ member \in  activeMembers }
			\nItemX{ grd14 }{ member \in  dom(cartTotal) }
			\nItemX{ grd8 }{ product \in  activeProducts }
			\nItemX{ grd10 }{ product \in  dom(productprice) }
			\nItemX{ grd11 }{ (productprice(product) *  carts(member)(product))\in  \nat }
			\nItemX{ grd12 }{ product\in dom(reciepts(member)) }
			\nItemX{ grd15 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = CHECKINGOUT }
			\end{description}
		\Witnesses
			\begin{description}
			\nItem{ location }{ location = Floor }
			\nItem{ amount }{ amount = carts(member)(product) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) -  carts(member)(product))\}  }
			\nItemX{ act2 }{ cartTotal(member) :=   ((productprice(product) *  carts(member)(product)) + cartTotal(member)) }
			\nItemX{ act3 }{ reciepts :=  reciepts \ovl  \{ member \mapsto  reciepts(member) \ovl  \{ product\mapsto reciepts(member)(product)+carts(member)(product)\} \}  }
			\nItemX{ act4 }{ carts(member) :=  \{ product\}  \domsub  carts(member) }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddProductToCart}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ member \in  activeMembers }
			\nItemX{ grd4 }{ member \in  dom(carts) }
			\nItemX{ grd3 }{ product \in  dom(carts(member)) }
			\nItemX{ grd5 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = ADDINGTOCART }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ carts :=  carts \ovl  \{ member \mapsto  carts(member) \ovl  \{ product\mapsto carts(member)(product)+1\} \}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewMember}
	\cmt{ PD-2.4.2 - The system will handle customer account creation }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  MEMBERS\setminus members }
			\nItemX{ grd2 }{ member \notin  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ members :=  members \bunion  \{ member\}  }
			\nItemX{ act4 }{ reciepts(member) :=  emptycart }
			\nItemX{ act5 }{ memberBalance(member) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {PayForCart}
	\cmt{ PD-2.3.1 The system will have a customer payment system for orders and sales }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ user }
			\ItemX{ payment }
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItemX{ grd7 }{ payment \in  \nat }
			\nItemX{ grd9 }{ member \in  activeMembers }
			\nItemX{ grd11 }{ member \in  dom(cartTotal) }
			\nItemX{ grd10 }{ payment \geq  cartTotal(member)  }
			\nItemX{ grd12 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = FINISHED }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act2 }{ till :=  till + payment }
			\nItemX{ act3 }{ transactionInProcess :=  \{ member\}  \domsub  transactionInProcess }
			\nItemX{ act4 }{ cartTotal :=  \{ member\}  \domsub  cartTotal }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ReturnProduct}
	\cmt{ PD-2.2.1 Refund provision for returned stock \& PD-2.2.3-The system will handle exchange of stock for cash refund }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ amount }
			\ItemX{ amountPaid }
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd2 }{ amount \in  \nat_1 }
			\nItemX{ grd6 }{ amountPaid \in  \nat }
			\nItemX{ grd7 }{ amountPaid \leq  till }
			\nItemX{ grd8 }{ member \in  activeMembers }
			\nItemX{ grd9 }{ product \in  dom(reciepts(member)) }
			\nItemX{ grd10 }{ reciepts(member)(product)- 1  \in  \nat }
			\nItemX{ grd11 }{ product\in dom(returnArea) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ returnArea(product) :=  returnArea(product) + amount }
			\nItemX{ act2 }{ till :=  till -  amountPaid }
			\nItemX{ act3 }{ reciepts :=  reciepts \ovl  \{ member \mapsto  reciepts(member) \ovl  \{ product\mapsto reciepts(member)(product)- 1\} \}  }
			\nItemX{ act4 }{ memberBalance(member) :=  memberBalance(member) + amountPaid }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\EXTD {AutoMoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + 1 }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd7 }{ productlevels(product)(Floor) \leq  productmaxthreshold(product)(Floor) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + 1),Backroom \mapsto  (productlevels(product)(Backroom) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\EXTD {AutoMoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + 1 }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd7 }{ productlevels(product)(Backroom) \leq  productmaxthreshold(product)(Backroom) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + 1),Warehouse \mapsto  (productlevels(product)(Warehouse) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductMaxThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductMaxThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ location }
			\Item{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto thresholdmax }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd5 }{ productlevels(product)(location) \leq  amount }
			\nItem{ grd12 }{ productthreshold(product)(location) \leq  amount }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productmaxthreshold(product) :=  productmaxthreshold(product) \ovl  \{ location \mapsto  amount\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewOrder}
	\cmt{ PD-1.4.1 - Function to order new stock from supplier }
	\EXTD {NewOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\Item{ quantity }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ user \in  users }
			\nItem{ grd3 }{ product \notin  dom(orders) }
			\nItem{ grd4 }{ quantity \in  \nat_1 }
			\nItem{ grd5 }{ product \notin  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  orders \bunion  \{ product \mapsto  quantity\}  }
			\nItem{ act2 }{ orderStatus :=  orderStatus \bunion  \{ product \mapsto  Created\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
	\EXTD {EditOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ quantity }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ quantity \in  1\upto thresholdmax }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ product \in  dom(orders) }
			\nItem{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  orders \ovl  \{ product \mapsto  quantity\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToDelivering}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {UpdateOrderToDelivering}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Delivering\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToComplete}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {UpdateOrderToComplete}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orderStatus) }
			\nItem{ grd3 }{ user \in  users }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Completed\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CompleteOrder}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {CompleteOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd6 }{ product \in  dom(orders) }
			\nItem{ grd7 }{ product \in  dom(orderStatus) }
			\nItem{ grd8 }{ orderStatus(product) = Completed }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Warehouse \mapsto  (productlevels(product)(Warehouse) + orders(product))\}  }
			\nItem{ act2 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act3 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CancelOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
	\EXTD {CancelOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orders) }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ product \in  dom(orderStatus) }
			\nItem{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act2 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewUser}
	\cmt{ PD-4.1.1 - Provide User Authentication }
	\EXTD {NewUser}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  USERS\setminus users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ users :=  users \bunion  \{ user\}  }
			\nItem{ act2 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditUserPriveleges}
	\cmt{ PD-4.1.3 - Allow modification of access rights }
	\EXTD {EditUserPriveleges}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewProduct}
	\cmt{ PD-1.1.2 Add new product to the database }
	\EXTD {NewProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  PRODUCT\setminus products }
			\nItem{ grd2 }{ price \in  \nat }
			\nItem{ grd3 }{ product \notin  activeProducts }
			\nItem{ grd4 }{ product \notin  products }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ products :=  products \bunion  \{ product\}  }
			\nItem{ act2 }{ productprice(product) :=  price }
			\nItem{ act4 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act5 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act6 }{ productmaxthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItemX{ act7 }{ returnArea(product) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateProduct}
	\cmt{ PD-1.1.3 Update a products details }
	\EXTD {UpdateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ price \in  \nat }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productprice(product) :=  price }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  1\upto productlevels(product)(Floor) }
			\nItem{ grd3 }{ backroom \in  1\upto productlevels(product)(Backroom) }
			\nItem{ grd4 }{ warehouse \in  1\upto productlevels(product)(Warehouse) }
			\nItem{ grd5 }{ productlevels(product)(Floor) \geq  floor }
			\nItem{ grd6 }{ productlevels(product)(Backroom) \geq  backroom }
			\nItem{ grd7 }{ productlevels(product)(Warehouse) \geq  warehouse }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd10 }{ productmaxthreshold(product)(Floor) \geq  floor }
			\nItem{ grd11 }{ productmaxthreshold(product)(Warehouse) \geq  warehouse }
			\nItem{ grd12 }{ productmaxthreshold(product)(Backroom) \geq  backroom }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productthreshold(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductLevel}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {SetProductLevel}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  productthreshold(product)(Floor)\upto thresholdmax }
			\nItem{ grd3 }{ backroom \in  productthreshold(product)(Backroom)\upto thresholdmax }
			\nItem{ grd4 }{ warehouse \in  productthreshold(product)(Warehouse)\upto thresholdmax }
			\nItem{ grd5 }{ floor \geq  productthreshold(product)(Floor) }
			\nItem{ grd6 }{ backroom \geq  productthreshold(product)(Backroom) }
			\nItem{ grd7 }{ warehouse \geq  productthreshold(product)(Warehouse) }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Backroom) -  productthreshold(product)(Backroom)) }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + amount }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + amount),Backroom \mapsto  (productlevels(product)(Backroom) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Warehouse) -  productthreshold(product)(Warehouse)) }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + amount }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + amount),Warehouse \mapsto  (productlevels(product)(Warehouse) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {RemoveStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto (productlevels(product)(location) -  productthreshold(product)(location)) }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ productlevels(product)(location) \geq  productthreshold(product)(location) + amount }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE \limp  location = Floor }
			\nItem{ grd7 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  \limp  location \in  STOCK\_LOCATION }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  \nat_1 }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ location = Floor \limp  userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItem{ grd6 }{ location \in  STOCK\_LOCATION\setminus \{ Floor\}  \limp  userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) + amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateProduct}
	\EXTD {ActivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ product \notin  activeProducts }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts \bunion  \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateProduct}
	\cmt{ PD-1.1.4 Remove a product from the system }
	\EXTD {DeactivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  products }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts\setminus \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act4 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
\END
\end{description}

\begin{description}
\pagebreak
\subsubsection{StockControl\_R3}
\MACHINE{StockControl\_R3}
\REFINES{StockControl\_R2}
\SEES{Stock\_ctx\_R2}
\VARIABLES
	\begin{description}
		\Item{ memberDiscounts }
		\Item{ discountedCartTotal }
		\Item{ products }
		\Item{ productprice }
		\Item{ productthreshold }
		\Item{ productlevels }
		\Item{ activeProducts }
		\Item{ users }
		\Item{ userPrivileges }
		\Item{ productmaxthreshold }
		\Item{ orders }
		\Item{ orderStatus }
		\Item{ till }
		\Item{ members }
		\Item{ carts }
		\Item{ transactionInProcess }
		\Item{ reciepts }
		\Item{ returnArea }
		\Item{ memberBalance }
		\Item{ activeMembers }
		\Item{ checkingOutCart }
		\Item{ checkoutActive }
	\end{description}
\INVARIANTS
	\begin{description}
		\nItemX{ inv1 }{ memberDiscounts \in  members \tfun  1\upto 100 }
		\nItemX{ inv2 }{ discountedCartTotal \in  dom(cartTotal) \tfun  \nat }
		\nItemX{ inv3 }{ \forall  member \qdot  member \in  dom(discountedCartTotal) \limp  member \in  dom(cartTotal) \land   cartTotal(member) *  (memberDiscounts(member)) /  100 = discountedCartTotal(member) }
		\nItemX{ inv4 }{ checkingOutCart \in  CART }
		\nItemX{ inv5 }{ checkoutActive \in  BOOL }
	\end{description}
\EVENTS
	\INITIALISATION
		\begin{description}
		\BeginAct
			\begin{description}
			\nItemX{ act1 }{ products :=  \emptyset  }
			\nItemX{ act2 }{ productprice :=  \emptyset  }
			\nItemX{ act3 }{ productthreshold :=  \emptyset  }
			\cmt{ individual product thresholds }
			\nItemX{ act4 }{ productlevels :=  \emptyset  }
			\cmt{ individual product levels }
			\nItemX{ act5 }{ activeProducts :=  \emptyset  }
			\nItemX{ act6 }{ users :=  \emptyset  }
			\nItemX{ act7 }{ userPrivileges :=  \emptyset  }
			\nItemX{ act8 }{ productmaxthreshold :=  \emptyset  }
			\nItemX{ act9 }{ orders :=  \emptyset  }
			\nItemX{ act10 }{ orderStatus :=  \emptyset  }
			\nItemX{ act11 }{ till :\in  \nat }
			\nItemX{ act12 }{ members :=  \emptyset  }
			\nItemX{ act13 }{ carts :=  \emptyset  }
			\nItemX{ act14 }{ transactionInProcess :=  \emptyset  }
			\nItemX{ act16 }{ reciepts :=  \emptyset  }
			\nItemX{ act17 }{ returnArea :=  \emptyset  }
			\nItemX{ act18 }{ memberBalance :=  \emptyset  }
			\nItemX{ act19 }{ activeMembers :=  \emptyset  }
			\nItemX{ act20 }{ memberDiscounts :=  \emptyset  }
			\nItemX{ act21 }{ discountedCartTotal :=  \emptyset  }
			\nItemX{ act22 }{ checkingOutCart :=  emptycart }
			\nItemX{ act23 }{ checkoutActive :=  FALSE }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetMemberDiscount}
	\cmt{ PD-2.4.3 - The system will allow the revision of a customer detail and cancellation of customer account }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\ItemX{ discount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  members }
			\nItemX{ grd2 }{ discount \in  1\upto 100 }
			\nItemX{ grd3 }{ member \notin  dom(discountedCartTotal) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ memberDiscounts(member) :=  discount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CancelCheckOut}
	\cmt{ PD -2.2.1 - Refund provision for returne stock }
	\REF {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ product }
			\ItemX{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd2 }{ product \in  dom(checkingOutCart) }
			\nItemX{ grd4 }{ product \in  activeProducts }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user)\in USER\_PRIVILEGE }
			\nItemX{ grd7 }{ product \in  dom(checkingOutCart) }
			\nItemX{ grd8 }{ checkingOutCart(product) \in  \nat_1 }
			\end{description}
		\Witnesses
			\begin{description}
			\nItem{ location }{ location = Floor }
			\nItem{ amount }{ amount = checkingOutCart(product) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + checkingOutCart(product))\}  }
			\nItemX{ act2 }{ checkingOutCart :=  \{ product\}  \domsub  checkingOutCart }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveCreditToMemberAccount}
	\cmt{ PD-2.2.2 - The system will handle exchange of stock for store credit }
	\EXTD {RemoveCreditToMemberAccount}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\Item{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\nItem{ grd2 }{ amount \in  1\upto memberBalance(member) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ memberBalance(member):= memberBalance(member)- amount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddCreditToMemberAccount}
	\cmt{ PD-2.2.2 - The system will handle exchange of stock for store credit }
	\EXTD {AddCreditToMemberAccount}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\Item{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ amount \in  \nat }
			\nItem{ grd2 }{ member \in  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ memberBalance(member) :=  memberBalance(member) + amount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateMembers}
	\cmt{ PD-2.4.4 - The system will have the functionality to remove a customer }
	\EXTD {DeactivateMembers}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeMembers:=  activeMembers\setminus \{ member\}  }
			\nItem{ act2 }{ memberBalance(member) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateMembers}
	\cmt{ PD-2.4.2 - The system will handle customer account creation }
	\EXTD {ActivateMembers}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  members\setminus activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeMembers :=  activeMembers \bunion  \{ member\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MovedReturnStock}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {MovedReturnStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItem{ grd6 }{ product \in  dom(returnArea) }
			\nItem{ grd7 }{ returnArea(product) \in  \nat_1 }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + returnArea(product))\}  }
			\nItem{ act2 }{ returnArea(product) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ProceedToPayment}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {ProceedToPayment}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\nItem{ grd2 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = CHECKINGOUT }
			\nItemX{ grd3 }{ checkoutActive = TRUE }
			\nItemX{ grd4 }{ member \in  dom(carts) \land  carts(member) = \emptyset  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ transactionInProcess(member) :=  FINISHED }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ProcceedToCheckout}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\REF {ProcceedToCheckout}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  activeMembers }
			\nItemX{ grd2 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = ADDINGTOCART }
			\nItemX{ grd3 }{ checkoutActive = FALSE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ transactionInProcess(member) :=  CHECKINGOUT }
			\nItemX{ act2 }{ checkoutActive :=  TRUE }
			\nItemX{ act3 }{ checkingOutCart :=  emptycart }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewCart}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\REF {NewCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ member \in  activeMembers }
			\nItemX{ grd2 }{ member\notin dom(transactionInProcess) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ carts(member) :=  emptycart }
			\nItemX{ act2 }{ discountedCartTotal(member) :=  0 }
			\nItemX{ act3 }{ transactionInProcess(member) :=  ADDINGTOCART }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CalculateTotalCart}
	\cmt{ PD-2.1.3 - The system will calculate total purchasing price of stock }
	\REF {CalculateTotalCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ user }
			\ItemX{ member }
			\ItemX{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ product \in  activeProducts }
			\nItemX{ grd13 }{ member \in  dom(carts) }
			\nItemX{ grd9 }{ product \in  dom(carts(member)) }
			\nItemX{ grd2 }{ carts(member)(product) \in 1\upto (productlevels(product)(Floor) -  productthreshold(product)(Floor)) }
			\cmt{ amount $\in$  1$\upto$ (productlevels(product)(Floor) $-$  productthreshold(product)(Floor)) }
			\nItemX{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) + carts(member)(product) }
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE }
			\nItemX{ grd7 }{ member \in  activeMembers }
			\nItemX{ grd14 }{ member \in  dom(discountedCartTotal) }
			\nItemX{ grd8 }{ product \in  activeProducts }
			\nItemX{ grd10 }{ product \in  dom(productprice) }
			\nItemX{ grd11 }{ (productprice(product) *  carts(member)(product))\in  \nat }
			\nItemX{ grd12 }{ product\in dom(reciepts(member)) }
			\nItemX{ grd15 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = CHECKINGOUT }
			\nItemX{ grd16 }{ checkoutActive = TRUE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) -  carts(member)(product))\}  }
			\nItemX{ act2 }{ discountedCartTotal(member) :=   ((productprice(product) *  carts(member)(product) *  (memberDiscounts(member)/ 100)) + discountedCartTotal(member)) }
			\nItemX{ act3 }{ reciepts :=  reciepts \ovl  \{ member \mapsto  reciepts(member) \ovl  \{ product\mapsto reciepts(member)(product)+carts(member)(product)\} \}  }
			\nItemX{ act4 }{ carts(member) :=  \{ product\}  \domsub  carts(member) }
			\nItemX{ act5 }{ checkingOutCart :=  checkingOutCart \ovl  \{ product \mapsto  carts(member)(product)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddProductToCart}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {AddProductToCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ member \in  activeMembers }
			\nItem{ grd4 }{ member \in  dom(carts) }
			\nItem{ grd3 }{ product \in  dom(carts(member)) }
			\nItem{ grd5 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = ADDINGTOCART }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ carts :=  carts \ovl  \{ member \mapsto  carts(member) \ovl  \{ product\mapsto carts(member)(product)+1\} \}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewMember}
	\cmt{ PD-2.4.2 - The system will handle customer account creation }
	\EXTD {NewMember}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  MEMBERS\setminus members }
			\nItem{ grd2 }{ member \notin  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ members :=  members \bunion  \{ member\}  }
			\nItem{ act4 }{ reciepts(member) :=  emptycart }
			\nItem{ act5 }{ memberBalance(member) :=  0 }
			\nItemX{ act6 }{ memberDiscounts(member) :=  100 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {PayForCart}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\REF {PayForCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ user }
			\ItemX{ payment }
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItemX{ grd7 }{ payment \in  \nat }
			\nItemX{ grd9 }{ member \in  activeMembers }
			\nItemX{ grd12 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = FINISHED }
			\nItemX{ grd11 }{ member \in  dom(discountedCartTotal) }
			\nItemX{ grd10 }{ payment * memberDiscounts(member) /  100 \geq  discountedCartTotal(member) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act2 }{ till :=  till + payment }
			\nItemX{ act3 }{ transactionInProcess :=  \{ member\}  \domsub  transactionInProcess }
			\nItemX{ act4 }{ checkoutActive :=  FALSE }
			\nItemX{ act5 }{ checkingOutCart :=  emptycart }
			\nItemX{ act6 }{ discountedCartTotal :=  \{ member\}  \domsub  discountedCartTotal }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ReturnProduct}
	\cmt{ PD - 2.2.1 \& PD - 2.2.3 - Initial Refund }
	\EXTD {ReturnProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ amountPaid }
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  \nat_1 }
			\nItem{ grd6 }{ amountPaid \in  \nat }
			\nItem{ grd7 }{ amountPaid \leq  till }
			\nItem{ grd8 }{ member \in  activeMembers }
			\nItem{ grd9 }{ product \in  dom(reciepts(member)) }
			\nItem{ grd10 }{ reciepts(member)(product)- 1  \in  \nat }
			\nItem{ grd11 }{ product\in dom(returnArea) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ returnArea(product) :=  returnArea(product) + amount }
			\nItem{ act2 }{ till :=  till -  amountPaid }
			\nItem{ act3 }{ reciepts :=  reciepts \ovl  \{ member \mapsto  reciepts(member) \ovl  \{ product\mapsto reciepts(member)(product)- 1\} \}  }
			\nItem{ act4 }{ memberBalance(member) :=  memberBalance(member) + amountPaid }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\EXTD {AutoMoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + 1 }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd7 }{ productlevels(product)(Floor) \leq  productmaxthreshold(product)(Floor) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + 1),Backroom \mapsto  (productlevels(product)(Backroom) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\EXTD {AutoMoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + 1 }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd7 }{ productlevels(product)(Backroom) \leq  productmaxthreshold(product)(Backroom) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + 1),Warehouse \mapsto  (productlevels(product)(Warehouse) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductMaxThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductMaxThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ location }
			\Item{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto thresholdmax }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd5 }{ productlevels(product)(location) \leq  amount }
			\nItem{ grd12 }{ productthreshold(product)(location) \leq  amount }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productmaxthreshold(product) :=  productmaxthreshold(product) \ovl  \{ location \mapsto  amount\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewOrder}
	\cmt{ PD-1.4.1 - Function to order new stock from supplier }
	\EXTD {NewOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\Item{ quantity }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ user \in  users }
			\nItem{ grd3 }{ product \notin  dom(orders) }
			\nItem{ grd4 }{ quantity \in  \nat_1 }
			\nItem{ grd5 }{ product \notin  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  orders \bunion  \{ product \mapsto  quantity\}  }
			\nItem{ act2 }{ orderStatus :=  orderStatus \bunion  \{ product \mapsto  Created\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
	\EXTD {EditOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ quantity }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ quantity \in  1\upto thresholdmax }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ product \in  dom(orders) }
			\nItem{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  orders \ovl  \{ product \mapsto  quantity\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToDelivering}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {UpdateOrderToDelivering}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Delivering\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToComplete}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {UpdateOrderToComplete}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orderStatus) }
			\nItem{ grd3 }{ user \in  users }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Completed\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CompleteOrder}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {CompleteOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd6 }{ product \in  dom(orders) }
			\nItem{ grd7 }{ product \in  dom(orderStatus) }
			\nItem{ grd8 }{ orderStatus(product) = Completed }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Warehouse \mapsto  (productlevels(product)(Warehouse) + orders(product))\}  }
			\nItem{ act2 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act3 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CancelOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
	\EXTD {CancelOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orders) }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ product \in  dom(orderStatus) }
			\nItem{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act2 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewUser}
	\cmt{ PD-4.1.1 - Provide User Authentication }
	\EXTD {NewUser}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  USERS\setminus users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ users :=  users \bunion  \{ user\}  }
			\nItem{ act2 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditUserPriveleges}
	\cmt{ PD-4.1.3 - Allow modification of access rights }
	\EXTD {EditUserPriveleges}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewProduct}
	\cmt{ PD-1.1.2 Add new product to the database }
	\EXTD {NewProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  PRODUCT\setminus products }
			\nItem{ grd2 }{ price \in  \nat }
			\nItem{ grd3 }{ product \notin  activeProducts }
			\nItem{ grd4 }{ product \notin  products }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ products :=  products \bunion  \{ product\}  }
			\nItem{ act2 }{ productprice(product) :=  price }
			\nItem{ act4 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act5 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act6 }{ productmaxthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act7 }{ returnArea(product) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateProduct}
	\cmt{ PD-1.1.3 Update a products details }
	\EXTD {UpdateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ price \in  \nat }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productprice(product) :=  price }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  1\upto productlevels(product)(Floor) }
			\nItem{ grd3 }{ backroom \in  1\upto productlevels(product)(Backroom) }
			\nItem{ grd4 }{ warehouse \in  1\upto productlevels(product)(Warehouse) }
			\nItem{ grd5 }{ productlevels(product)(Floor) \geq  floor }
			\nItem{ grd6 }{ productlevels(product)(Backroom) \geq  backroom }
			\nItem{ grd7 }{ productlevels(product)(Warehouse) \geq  warehouse }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd10 }{ productmaxthreshold(product)(Floor) \geq  floor }
			\nItem{ grd11 }{ productmaxthreshold(product)(Warehouse) \geq  warehouse }
			\nItem{ grd12 }{ productmaxthreshold(product)(Backroom) \geq  backroom }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productthreshold(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductLevel}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {SetProductLevel}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  productthreshold(product)(Floor)\upto thresholdmax }
			\nItem{ grd3 }{ backroom \in  productthreshold(product)(Backroom)\upto thresholdmax }
			\nItem{ grd4 }{ warehouse \in  productthreshold(product)(Warehouse)\upto thresholdmax }
			\nItem{ grd5 }{ floor \geq  productthreshold(product)(Floor) }
			\nItem{ grd6 }{ backroom \geq  productthreshold(product)(Backroom) }
			\nItem{ grd7 }{ warehouse \geq  productthreshold(product)(Warehouse) }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Backroom) -  productthreshold(product)(Backroom)) }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + amount }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + amount),Backroom \mapsto  (productlevels(product)(Backroom) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Warehouse) -  productthreshold(product)(Warehouse)) }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + amount }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + amount),Warehouse \mapsto  (productlevels(product)(Warehouse) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {RemoveStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto (productlevels(product)(location) -  productthreshold(product)(location)) }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ productlevels(product)(location) \geq  productthreshold(product)(location) + amount }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE \limp  location = Floor }
			\nItem{ grd7 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  \limp  location \in  STOCK\_LOCATION }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  \nat_1 }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ location = Floor \limp  userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItem{ grd6 }{ location \in  STOCK\_LOCATION\setminus \{ Floor\}  \limp  userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) + amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateProduct}
	\EXTD {ActivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ product \notin  activeProducts }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts \bunion  \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateProduct}
	\cmt{ PD-1.1.4 Remove a product from the system }
	\EXTD {DeactivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  products }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts\setminus \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act4 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
\END
\end{description}

\begin{description}
\pagebreak
\subsubsection{StockControl\_R4}
\MACHINE{StockControl\_R4}
\REFINES{StockControl\_R3}
\SEES{Stock\_ctx\_R2}
\VARIABLES
	\begin{description}
		\Item{ memberDiscounts }
		\Item{ discountedCartTotal }
		\Item{ products }
		\Item{ productprice }
		\Item{ productthreshold }
		\Item{ productlevels }
		\Item{ activeProducts }
		\Item{ users }
		\Item{ userPrivileges }
		\Item{ productmaxthreshold }
		\Item{ orders }
		\Item{ orderStatus }
		\Item{ till }
		\Item{ members }
		\Item{ carts }
		\Item{ transactionInProcess }
		\Item{ reciepts }
		\Item{ returnArea }
		\Item{ memberBalance }
		\Item{ activeMembers }
		\Item{ checkingOutCart }
		\Item{ checkoutActive }
		\Item{ amountDue }
		\Item{ paidAmount }
		\Item{ change }
	\end{description}
\INVARIANTS
	\begin{description}
		\nItemX{ inv1 }{ amountDue \in \nat }
		\nItemX{ inv2 }{ paidAmount \in  \nat }
		\nItemX{ inv3 }{ change \in  \nat }
	\end{description}
\EVENTS
	\INITIALISATION
		\\\textit{extended}
		\begin{description}
		\BeginAct
			\begin{description}
			\nItem{ act1 }{ products :=  \emptyset  }
			\nItem{ act2 }{ productprice :=  \emptyset  }
			\nItem{ act3 }{ productthreshold :=  \emptyset  }
			\cmt{ individual product thresholds }
			\nItem{ act4 }{ productlevels :=  \emptyset  }
			\cmt{ individual product levels }
			\nItem{ act5 }{ activeProducts :=  \emptyset  }
			\nItem{ act6 }{ users :=  \emptyset  }
			\nItem{ act7 }{ userPrivileges :=  \emptyset  }
			\nItem{ act8 }{ productmaxthreshold :=  \emptyset  }
			\nItem{ act9 }{ orders :=  \emptyset  }
			\nItem{ act10 }{ orderStatus :=  \emptyset  }
			\nItem{ act11 }{ till :\in  \nat }
			\nItem{ act12 }{ members :=  \emptyset  }
			\nItem{ act13 }{ carts :=  \emptyset  }
			\nItem{ act14 }{ transactionInProcess :=  \emptyset  }
			\nItem{ act16 }{ reciepts :=  \emptyset  }
			\nItem{ act17 }{ returnArea :=  \emptyset  }
			\nItem{ act18 }{ memberBalance :=  \emptyset  }
			\nItem{ act19 }{ activeMembers :=  \emptyset  }
			\nItem{ act20 }{ memberDiscounts :=  \emptyset  }
			\nItem{ act21 }{ discountedCartTotal :=  \emptyset  }
			\nItem{ act22 }{ checkingOutCart :=  emptycart }
			\nItem{ act23 }{ checkoutActive :=  FALSE }
			\nItemX{ act24 }{ amountDue :=  0 }
			\nItemX{ act25 }{ paidAmount :=  0 }
			\nItemX{ act26 }{ change :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {PayForCartCash}
	\cmt{ PD-2.3.1 The system will have a customer payment system for orders and sales }
	\REF {PayForCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ user }
			\ItemX{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd5 }{ user \in  users }
			\nItemX{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItemX{ grd7 }{ paidAmount \in  \nat }
			\nItemX{ grd9 }{ member \in  activeMembers }
			\nItemX{ grd12 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = FINISHED }
			\nItemX{ grd11 }{ member \in  dom(discountedCartTotal) }
			\nItemX{ grd10 }{ paidAmount * memberDiscounts(member) /  100 \geq  discountedCartTotal(member) }
			\nItemX{ grd13 }{ paidAmount = amountDue }
			\nItemX{ grd14 }{ change \geq  0 }
			\end{description}
		\Witnesses
			\begin{description}
			\nItem{ payment }{ payment = paidAmount }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act2 }{ till :=  till + paidAmount }
			\nItemX{ act3 }{ transactionInProcess :=  \{ member\}  \domsub  transactionInProcess }
			\nItemX{ act4 }{ checkoutActive :=  FALSE }
			\nItemX{ act5 }{ checkingOutCart :=  emptycart }
			\nItemX{ act6 }{ discountedCartTotal :=  \{ member\}  \domsub  discountedCartTotal }
			\end{description}
		\EndAct
		\end{description}
	\EVT {PayForCartOtherPaymentType}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {PayForCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ payment }
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd7 }{ payment \in  \nat }
			\nItem{ grd9 }{ member \in  activeMembers }
			\nItem{ grd12 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = FINISHED }
			\nItem{ grd11 }{ member \in  dom(discountedCartTotal) }
			\nItem{ grd10 }{ payment * memberDiscounts(member) /  100 \geq  discountedCartTotal(member) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act2 }{ till :=  till + payment }
			\nItem{ act3 }{ transactionInProcess :=  \{ member\}  \domsub  transactionInProcess }
			\nItem{ act4 }{ checkoutActive :=  FALSE }
			\nItem{ act5 }{ checkingOutCart :=  emptycart }
			\nItem{ act6 }{ discountedCartTotal :=  \{ member\}  \domsub  discountedCartTotal }
			\end{description}
		\EndAct
		\end{description}
	\EVT {GiveChangeCash}
	\cmt{ PD-2.3.1 The system will have a customer payment system for orders and sales }
		\begin{description}
		\WhenGrd
			\begin{description}
			\nItemX{ grd1 }{ amountDue \in  \nat }
			\nItemX{ grd2 }{ paidAmount \in  \nat }
			\nItemX{ grd3 }{ change = 0 }
			\nItemX{ grd4 }{ paidAmount >  amountDue }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ change :=  paidAmount -  amountDue }
			\nItemX{ act2 }{ paidAmount :=  paidAmount -  (paidAmount -  amountDue) }
			\end{description}
		\EndAct
		\end{description}
	\EVT {PayCash}
	\cmt{ PD-2.3.1 The system will have a customer payment system for orders and sales }
		\begin{description}
		\AnyPrm
			\begin{description}
			\ItemX{ cash }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItemX{ grd1 }{ cash \in  \nat }
			\nItemX{ grd2 }{ amountDue \in  \nat }
			\nItemX{ grd3 }{ paidAmount \in  \nat }
			\nItemX{ grd4 }{ paidAmount <  amountDue	 }
			\end{description}
		\ThenAct
			\begin{description}
			\nItemX{ act1 }{ paidAmount :=  paidAmount + cash }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetMemberDiscount}
	\cmt{ PD-2.4.3 - The system will allow the revision of a customer detail and cancellation of customer account }
	\EXTD {SetMemberDiscount}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\Item{ discount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  members }
			\nItem{ grd2 }{ discount \in  1\upto 100 }
			\nItem{ grd3 }{ member \notin  dom(discountedCartTotal) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ memberDiscounts(member) :=  discount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CancelCheckOut}
	\cmt{ PD -2.2.1 - Refund provision for returne stock }
	\EXTD {CancelCheckOut}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  dom(checkingOutCart) }
			\nItem{ grd4 }{ product \in  activeProducts }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user)\in USER\_PRIVILEGE }
			\nItem{ grd7 }{ product \in  dom(checkingOutCart) }
			\nItem{ grd8 }{ checkingOutCart(product) \in  \nat_1 }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + checkingOutCart(product))\}  }
			\nItem{ act2 }{ checkingOutCart :=  \{ product\}  \domsub  checkingOutCart }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveCreditToMemberAccount}
	\cmt{ PD-2.2.2 - The system will handle exchange of stock for store credit }
	\EXTD {RemoveCreditToMemberAccount}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\Item{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\nItem{ grd2 }{ amount \in  1\upto memberBalance(member) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ memberBalance(member):= memberBalance(member)- amount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddCreditToMemberAccount}
	\cmt{ PD-2.2.2 - The system will handle exchange of stock for store credit }
	\EXTD {AddCreditToMemberAccount}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\Item{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ amount \in  \nat }
			\nItem{ grd2 }{ member \in  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ memberBalance(member) :=  memberBalance(member) + amount }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateMembers}
	\cmt{ PD-2.4.4 - The system will have the functionality to remove a customer }
	\EXTD {DeactivateMembers}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeMembers:=  activeMembers\setminus \{ member\}  }
			\nItem{ act2 }{ memberBalance(member) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateMembers}
	\cmt{ PD-2.4.2 - The system will handle customer account creation }
	\EXTD {ActivateMembers}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  members\setminus activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeMembers :=  activeMembers \bunion  \{ member\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MovedReturnStock}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {MovedReturnStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItem{ grd6 }{ product \in  dom(returnArea) }
			\nItem{ grd7 }{ returnArea(product) \in  \nat_1 }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + returnArea(product))\}  }
			\nItem{ act2 }{ returnArea(product) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ProceedToPayment}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {ProceedToPayment}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\nItem{ grd2 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = CHECKINGOUT }
			\nItem{ grd3 }{ checkoutActive = TRUE }
			\nItem{ grd4 }{ member \in  dom(carts) \land  carts(member) = \emptyset  }
			\nItemX{ grd5 }{ member\in dom(discountedCartTotal) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ transactionInProcess(member) :=  FINISHED }
			\nItemX{ act2 }{ amountDue :=  discountedCartTotal(member) }
			\nItemX{ act3 }{ paidAmount :=  0 }
			\nItemX{ act4 }{ change :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ProcceedToCheckout}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {ProcceedToCheckout}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\nItem{ grd2 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = ADDINGTOCART }
			\nItem{ grd3 }{ checkoutActive = FALSE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ transactionInProcess(member) :=  CHECKINGOUT }
			\nItem{ act2 }{ checkoutActive :=  TRUE }
			\nItem{ act3 }{ checkingOutCart :=  emptycart }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewCart}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {NewCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  activeMembers }
			\nItem{ grd2 }{ member\notin dom(transactionInProcess) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ carts(member) :=  emptycart }
			\nItem{ act2 }{ discountedCartTotal(member) :=  0 }
			\nItem{ act3 }{ transactionInProcess(member) :=  ADDINGTOCART }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CalculateTotalCart}
	\cmt{ PD-2.1.3 - The system will calculate total purchasing price of stock }
	\EXTD {CalculateTotalCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ member }
			\Item{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd13 }{ member \in  dom(carts) }
			\nItem{ grd9 }{ product \in  dom(carts(member)) }
			\nItem{ grd2 }{ carts(member)(product) \in 1\upto (productlevels(product)(Floor) -  productthreshold(product)(Floor)) }
			\cmt{ amount $\in$  1$\upto$ (productlevels(product)(Floor) $-$  productthreshold(product)(Floor)) }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) + carts(member)(product) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE }
			\nItem{ grd7 }{ member \in  activeMembers }
			\nItem{ grd14 }{ member \in  dom(discountedCartTotal) }
			\nItem{ grd8 }{ product \in  activeProducts }
			\nItem{ grd10 }{ product \in  dom(productprice) }
			\nItem{ grd11 }{ (productprice(product) *  carts(member)(product))\in  \nat }
			\nItem{ grd12 }{ product\in dom(reciepts(member)) }
			\nItem{ grd15 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = CHECKINGOUT }
			\nItem{ grd16 }{ checkoutActive = TRUE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) -  carts(member)(product))\}  }
			\nItem{ act2 }{ discountedCartTotal(member) :=   ((productprice(product) *  carts(member)(product) *  (memberDiscounts(member)/ 100)) + discountedCartTotal(member)) }
			\nItem{ act3 }{ reciepts :=  reciepts \ovl  \{ member \mapsto  reciepts(member) \ovl  \{ product\mapsto reciepts(member)(product)+carts(member)(product)\} \}  }
			\nItem{ act4 }{ carts(member) :=  \{ product\}  \domsub  carts(member) }
			\nItem{ act5 }{ checkingOutCart :=  checkingOutCart \ovl  \{ product \mapsto  carts(member)(product)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddProductToCart}
	\cmt{ PD-2.1.2 The system will be able to process the sale of goods updating the appropriate stock levels }
	\EXTD {AddProductToCart}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ member \in  activeMembers }
			\nItem{ grd4 }{ member \in  dom(carts) }
			\nItem{ grd3 }{ product \in  dom(carts(member)) }
			\nItem{ grd5 }{ member \in  dom(transactionInProcess) \land  transactionInProcess(member) = ADDINGTOCART }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ carts :=  carts \ovl  \{ member \mapsto  carts(member) \ovl  \{ product\mapsto carts(member)(product)+1\} \}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewMember}
	\cmt{ PD-2.4.2 - The system will handle customer account creation }
	\EXTD {NewMember}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ member \in  MEMBERS\setminus members }
			\nItem{ grd2 }{ member \notin  activeMembers }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ members :=  members \bunion  \{ member\}  }
			\nItem{ act4 }{ reciepts(member) :=  emptycart }
			\nItem{ act5 }{ memberBalance(member) :=  0 }
			\nItem{ act6 }{ memberDiscounts(member) :=  100 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ReturnProduct}
	\cmt{ PD - 2.2.1 \& PD - 2.2.3 - Initial Refund }
	\EXTD {ReturnProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ amountPaid }
			\Item{ member }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  \nat_1 }
			\nItem{ grd6 }{ amountPaid \in  \nat }
			\nItem{ grd7 }{ amountPaid \leq  till }
			\nItem{ grd8 }{ member \in  activeMembers }
			\nItem{ grd9 }{ product \in  dom(reciepts(member)) }
			\nItem{ grd10 }{ reciepts(member)(product)- 1  \in  \nat }
			\nItem{ grd11 }{ product\in dom(returnArea) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ returnArea(product) :=  returnArea(product) + amount }
			\nItem{ act2 }{ till :=  till -  amountPaid }
			\nItem{ act3 }{ reciepts :=  reciepts \ovl  \{ member \mapsto  reciepts(member) \ovl  \{ product\mapsto reciepts(member)(product)- 1\} \}  }
			\nItem{ act4 }{ memberBalance(member) :=  memberBalance(member) + amountPaid }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\EXTD {AutoMoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + 1 }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd7 }{ productlevels(product)(Floor) \leq  productmaxthreshold(product)(Floor) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + 1),Backroom \mapsto  (productlevels(product)(Backroom) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AutoMoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations. }
	\EXTD {AutoMoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + 1 }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd7 }{ productlevels(product)(Backroom) \leq  productmaxthreshold(product)(Backroom) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + 1),Warehouse \mapsto  (productlevels(product)(Warehouse) -  1)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductMaxThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductMaxThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ location }
			\Item{ amount }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto thresholdmax }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd5 }{ productlevels(product)(location) \leq  amount }
			\nItem{ grd12 }{ productthreshold(product)(location) \leq  amount }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productmaxthreshold(product) :=  productmaxthreshold(product) \ovl  \{ location \mapsto  amount\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewOrder}
	\cmt{ PD-1.4.1 - Function to order new stock from supplier }
	\EXTD {NewOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\Item{ quantity }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ user \in  users }
			\nItem{ grd3 }{ product \notin  dom(orders) }
			\nItem{ grd4 }{ quantity \in  \nat_1 }
			\nItem{ grd5 }{ product \notin  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  orders \bunion  \{ product \mapsto  quantity\}  }
			\nItem{ act2 }{ orderStatus :=  orderStatus \bunion  \{ product \mapsto  Created\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
	\EXTD {EditOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ quantity }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ quantity \in  1\upto thresholdmax }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ product \in  dom(orders) }
			\nItem{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  orders \ovl  \{ product \mapsto  quantity\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToDelivering}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {UpdateOrderToDelivering}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orderStatus) }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Delivering\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateOrderToComplete}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {UpdateOrderToComplete}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orderStatus) }
			\nItem{ grd3 }{ user \in  users }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orderStatus :=  orderStatus \ovl  \{ product \mapsto  Completed\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CompleteOrder}
	\cmt{ PD-1.4.1 Function to order new stock from supplier }
	\EXTD {CompleteOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd6 }{ product \in  dom(orders) }
			\nItem{ grd7 }{ product \in  dom(orderStatus) }
			\nItem{ grd8 }{ orderStatus(product) = Completed }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Warehouse \mapsto  (productlevels(product)(Warehouse) + orders(product))\}  }
			\nItem{ act2 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act3 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {CancelOrder}
	\cmt{ PD-1.4.3 Ability to edit and cancel an a stock order }
	\EXTD {CancelOrder}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  dom(orders) }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ product \in  dom(orderStatus) }
			\nItem{ grd5 }{ orderStatus(product) = Created }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act2 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewUser}
	\cmt{ PD-4.1.1 - Provide User Authentication }
	\EXTD {NewUser}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  USERS\setminus users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ users :=  users \bunion  \{ user\}  }
			\nItem{ act2 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {EditUserPriveleges}
	\cmt{ PD-4.1.3 - Allow modification of access rights }
	\EXTD {EditUserPriveleges}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ user }
			\Item{ privilege }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ user \in  users }
			\nItem{ grd2 }{ privilege \in  USER\_PRIVILEGE }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ userPrivileges(user) :=  privilege }
			\end{description}
		\EndAct
		\end{description}
	\EVT {NewProduct}
	\cmt{ PD-1.1.2 Add new product to the database }
	\EXTD {NewProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  PRODUCT\setminus products }
			\nItem{ grd2 }{ price \in  \nat }
			\nItem{ grd3 }{ product \notin  activeProducts }
			\nItem{ grd4 }{ product \notin  products }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ products :=  products \bunion  \{ product\}  }
			\nItem{ act2 }{ productprice(product) :=  price }
			\nItem{ act4 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act5 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act6 }{ productmaxthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act7 }{ returnArea(product) :=  0 }
			\end{description}
		\EndAct
		\end{description}
	\EVT {UpdateProduct}
	\cmt{ PD-1.1.3 Update a products details }
	\EXTD {UpdateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ price }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ price \in  \nat }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productprice(product) :=  price }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductThreshold}
	\cmt{ PD-1.4.4 Allow stock level thresholds to be set }
	\EXTD {SetProductThreshold}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  1\upto productlevels(product)(Floor) }
			\nItem{ grd3 }{ backroom \in  1\upto productlevels(product)(Backroom) }
			\nItem{ grd4 }{ warehouse \in  1\upto productlevels(product)(Warehouse) }
			\nItem{ grd5 }{ productlevels(product)(Floor) \geq  floor }
			\nItem{ grd6 }{ productlevels(product)(Backroom) \geq  backroom }
			\nItem{ grd7 }{ productlevels(product)(Warehouse) \geq  warehouse }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\nItem{ grd10 }{ productmaxthreshold(product)(Floor) \geq  floor }
			\nItem{ grd11 }{ productmaxthreshold(product)(Warehouse) \geq  warehouse }
			\nItem{ grd12 }{ productmaxthreshold(product)(Backroom) \geq  backroom }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productthreshold(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {SetProductLevel}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {SetProductLevel}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ floor }
			\Item{ backroom }
			\Item{ warehouse }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ floor \in  productthreshold(product)(Floor)\upto thresholdmax }
			\nItem{ grd3 }{ backroom \in  productthreshold(product)(Backroom)\upto thresholdmax }
			\nItem{ grd4 }{ warehouse \in  productthreshold(product)(Warehouse)\upto thresholdmax }
			\nItem{ grd5 }{ floor \geq  productthreshold(product)(Floor) }
			\nItem{ grd6 }{ backroom \geq  productthreshold(product)(Backroom) }
			\nItem{ grd7 }{ warehouse \geq  productthreshold(product)(Warehouse) }
			\nItem{ grd8 }{ user \in  users }
			\nItem{ grd9 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  \{ Floor \mapsto  floor,Backroom \mapsto  backroom,Warehouse \mapsto  warehouse\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToFloor}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToFloor}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Backroom) -  productthreshold(product)(Backroom)) }
			\nItem{ grd3 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) + amount }
			\nItem{ grd4 }{ productlevels(product)(Floor) \geq  productthreshold(product)(Floor) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Floor \mapsto  (productlevels(product)(Floor) + amount),Backroom \mapsto  (productlevels(product)(Backroom) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {MoveStockToBackroom}
	\cmt{ PD-1.4.2 Ability to request stock from other locations }
	\EXTD {MoveStockToBackroom}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ amount }
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd2 }{ product \in  activeProducts }
			\nItem{ grd1 }{ amount \in  1\upto (productlevels(product)(Warehouse) -  productthreshold(product)(Warehouse)) }
			\nItem{ grd3 }{ productlevels(product)(Warehouse) \geq  productthreshold(product)(Warehouse) + amount }
			\nItem{ grd4 }{ productlevels(product)(Backroom) \geq  productthreshold(product)(Backroom) }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ Backroom \mapsto  (productlevels(product)(Backroom) + amount),Warehouse \mapsto  (productlevels(product)(Warehouse) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {RemoveStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {RemoveStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  1\upto (productlevels(product)(location) -  productthreshold(product)(location)) }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ productlevels(product)(location) \geq  productthreshold(product)(location) + amount }
			\nItem{ grd5 }{ user \in  users }
			\nItem{ grd6 }{ userPrivileges(user) \in  USER\_PRIVILEGE \limp  location = Floor }
			\nItem{ grd7 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  \limp  location \in  STOCK\_LOCATION }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) -  amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {AddStock}
	\cmt{ PD 1.1.1 Ability to add/remove stock from a location. }
	\EXTD {AddStock}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ amount }
			\Item{ location }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ amount \in  \nat_1 }
			\nItem{ grd3 }{ location \in  STOCK\_LOCATION }
			\nItem{ grd4 }{ user \in  users }
			\nItem{ grd5 }{ location = Floor \limp  userPrivileges(user) \in  USER\_PRIVILEGE  }
			\nItem{ grd6 }{ location \in  STOCK\_LOCATION\setminus \{ Floor\}  \limp  userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ productlevels(product) :=  productlevels(product) \ovl  \{ location \mapsto  (productlevels(product)(location) + amount)\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {ActivateProduct}
	\EXTD {ActivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  products }
			\nItem{ grd2 }{ product \notin  activeProducts }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts \bunion  \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ productthreshold(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\end{description}
		\EndAct
		\end{description}
	\EVT {DeactivateProduct}
	\cmt{ PD-1.1.4 Remove a product from the system }
	\EXTD {DeactivateProduct}
		\begin{description}
		\AnyPrm
			\begin{description}
			\Item{ product }
			\Item{ user }
			\end{description}
		\WhereGrd
			\begin{description}
			\nItem{ grd1 }{ product \in  activeProducts }
			\nItem{ grd2 }{ product \in  products }
			\nItem{ grd3 }{ user \in  users }
			\nItem{ grd4 }{ userPrivileges(user) \in  \{ Stock\_Control,Manager,Owner\}  }
			\end{description}
		\ThenAct
			\begin{description}
			\nItem{ act1 }{ activeProducts :=  activeProducts\setminus \{ product\}  }
			\nItem{ act2 }{ productlevels(product) :=  STOCK\_LOCATION \cprod  \{ 0\}  }
			\nItem{ act3 }{ orders :=  \{ product\}  \domsub  orders }
			\nItem{ act4 }{ orderStatus :=  \{ product\}  \domsub  orderStatus }
			\end{description}
		\EndAct
		\end{description}
\END
\end{description}


\pagebreak





\subsection{Ruby on Rails code}

\subsubsection{Product Model}
\begin{verbatim}
class Product < ActiveRecord::Base
  has_many :stock_levels, :dependent => :destroy
  has_many :stock_locations, :through => :stock_levels
  has_many :sale_items
  has_many :sales, :through => :sale_items
  has_many :transactions, :through => :sales
  has_many :supplier_stock_orders
  belongs_to :supplier
  attr_accessible :cost, :description, :name, :price, :barcode, :supplier, :brand, :size, :active


  validates :name, :description, :price,:brand, :size, :cost, :barcode, :supplier, :presence => true

  validates :price, :cost, :numericality => {:greater_than_or_equal_to => 0}

  validates :barcode, :uniqueness => true

  validates_associated :stock_levels

  def total_stock
      stock_levels.sum(&:quantity)
  end

  def total_sold
    sale_items.sum(&:quantity)
  end

  def total_on_order
    supplier_stock_orders.where(:status => ['Created', 'Processed']).sum(&:quantity)
  end

  def revenue
    sale_items.sum(&:quantity).to_f * price.to_f
  end

  def total_cost
    sale_items.sum(&:quantity).to_f * cost.to_f
  end

end

\end{verbatim}

\subsubsection{Refund Model}
\begin{verbatim}
class Refund < ActiveRecord::Base
  belongs_to :sale_item
  belongs_to :checkout_user, :class_name => 'User'
  
  has_one :products, :through => :sale_items
  has_one :sale, :through => :sale_items
  
  attr_accessible :quantity, :reason
  
  validate :stock_not_already_returned
  
  def stock_not_already_returned
    @refunds = Refund.find_all_by_sale_item_id(sale_item.id)
    @quantity_returned = @refunds.sum(&:quantity)
    @quantity_available = sale_item.quantity - @quantity_returned
    if sale_item.quantity == 0
      errors.add(:base, 'Product was not found in sale')
    elsif quantity > @quantity_available
      errors.add(:quantity, "of item return is too high. There are only #{@quantity_available} item(s) of this product available to be returned")
    end
  end
  
end

\end{verbatim}
\subsubsection{Sales Model}
\begin{verbatim}
class Sale < ActiveRecord::Base
    has_many :sale_items, :dependent => :destroy
    has_many :products, :through => :sale_items
    has_many :transactions

    belongs_to :customer, :class_name => 'User'
    belongs_to :checkout_user, :class_name => 'User'

    before_save :check_customer

    attr_accessible :customer, :checkout_user, :discount, :status, :updated_at

    #Event-B: transactionInProcess ∈ members ⇸TRANSACTIONTYPE
    #         axm3: partition(TRANSACTIONTYPE, {ADDINGTOCART},{CHECKINGOUT},{FINISHED})
    #Comment: These was just renamed but serves the exact same person.

    validates :status,
       :inclusion  => { :in => [ 'Adding to Cart', 'Checking Out', 'Finished'],
       :message    => "%{value} is not a valid status" }


    # Various other methods.
    def total
      sale_items.sum(&:sub_total)
    end

    def amount_paid
      transactions.sum(&:amount)
    end

    def discount
      if customer && customer.discount
        customer.discount / 100 * total
      else
        0
      end
    end

    def change_given
      [amount_paid - total, 0].max
    end

    def check_customer
      if customer.nil?
        customer = User.find_by_email('default@pos.com')
      end
    end
end

\end{verbatim}
\subsubsection{SaleItem Model}
\begin{verbatim}
class SaleItem < ActiveRecord::Base
  #Event-B: CART = PRODUCT ⇸ ℕ
  #Summary: This class represents the cart set from our model
  belongs_to :sale
  belongs_to :product

  attr_accessible :sale, :product, :quantity, :sub_total
  validates_presence_of :sale, :product, :quantity

  validate :product_is_active
  validate :deduct_stock
  before_destroy :restore_stock

  def stock_level
    if @stock_level.nil?
      @stock_level = StockLevel.find_by_product_id_and_stock_location_id(product, StockLocation.where(:name => 'Floor'))
    end
    return @stock_level
  end

  def product_is_active
    errors.add(:product, "is not active") unless product.active == 't'
  end

  def deduct_stock
    if quantity_changed? and quantity_was
      stock_level.quantity += quantity_was
    end
    stock_level.quantity -= quantity
    if stock_level.quantity >= 0
      stock_level.save!
    else
      errors.add(:quantity, "cannot exceed current floor stock")
      return false
    end
  end

  def restore_stock
    stock_level.quantity += quantity
    stock_level.save
  end
end

\end{verbatim}
\subsubsection{StockLevel Model}
\begin{verbatim}
class StockLevel < ActiveRecord::Base
  #Event-B: productmaxthreshold ∈ products → (STOCK_LOCATION → ℕ)
  #Event-B: productlevels ∈ products →(STOCK_LOCATION → ℕ)

  belongs_to :product
  belongs_to :stock_location
  attr_accessible :quantity, :threshold, :product, :stock_location

  # Event-B: ∀p,l · p∈ activeProducts ∧ l ∈ STOCK_LOCATION ⇒ productmaxthreshold(p)(l) ≥ productthreshold(p)(l)
  # Validate that stock_level is above miniumum threshold, and automatically reorder if quantity falls below threshold
  validates :quantity, :threshold, :numericality => {:greater_than_or_equal_to => 0}
  after_save :automatic_reorder

  


  def below
  	quantity < threshold
  end

  def automatic_reorder
    if below
      if stock_location.previous_location
        #stock transfer
        exsting_transfer = StockTransfer.find_by_product_id_and_stock_location_id_and_complete(product, stock_location, false)
        if exsting_transfer
          exsting_transfer.quantity = threshold - quantity
          exsting_transfer.save!
        else
          StockTransfer.create!(
            :product => product,
            :stock_location => stock_location,
            :quantity => threshold - quantity,
            :complete => false
          )
        end
      else
        #supplier stock order
        existing_order = SupplierStockOrder.find_by_product_id_and_status(product, 'Created')
        if existing_order
          existing_order.quantity = threshold - quantity
          existing_order.save!
        else
          SupplierStockOrder.create!(
            :product => product,
            :quantity => threshold - quantity,
            :status => 'Created'
          )
        end
      end
    end
  end
end

\end{verbatim}
\subsubsection{StockLocation Model}
\begin{verbatim}
class StockLocation < ActiveRecord::Base
  has_many :stock_levels, :dependent => :destroy
  has_many :products, :through => :stock_levels

  has_one :previous_location
  belongs_to :previous_location, :class_name => 'StockLocation'

  attr_accessible :id,:name, :previous_location

  validates :name, :presence => true, :uniqueness => true

end

\end{verbatim}
\subsubsection{StockTransfer Model}
\begin{verbatim}
class StockTransfer < ActiveRecord::Base
  belongs_to :product
  belongs_to :stock_location
  attr_accessible :product, :stock_location, :complete, :quantity

   validates :product, :stock_location, :quantity, :presence => true
   validates :quantity, :numericality => {:greater_than => 0}

end

\end{verbatim}
\subsubsection{Supplier Model}
\begin{verbatim}
class Supplier < ActiveRecord::Base
  has_many :products
  attr_accessible :contact_number, :contact_person, :name

  validates :name, :contact_number, :contact_person, :presence => true
  validates :name, :uniqueness => true

end

\end{verbatim}
\subsubsection{SupplierStockOrder Model}
\begin{verbatim}
class SupplierStockOrder < ActiveRecord::Base
  belongs_to :product
  attr_accessible :product, :quantity, :status

  validates :status,
       :inclusion  => { :in => [ 'Created', 'Processed', 'Completed'],
       :message    => "%{value} is not a valid status" }

  validates :product, :quantity, :status, :presence => true
  validates :quantity, :numericality => {:greater_than => 0}


  def total
  	quantity * product.cost
  end
end

\end{verbatim}
\subsubsection{Transaction Model}
\begin{verbatim}
class Transaction < ActiveRecord::Base
  belongs_to :sale

  attr_accessible :amount, :approved, :method, :sale
  validates_presence_of :amount, :approved, :method, :sale

  validates :amount, :exclusion =>
  	{:in => [0], :message => "Must be non-zero amount." }

  validates :method,  :inclusion => { :in => ['Cash', 'Other']}

  validates :amount, :if => Proc.new {method == 'Cash'},
  	:inclusion => {:in => [0.05, 0.10, 0.20, 0.50, 1.00, 2.00, 5.00, 10.00, 20.00, 50.00, 100.00]}

  validates_acceptance_of :approved, :accept => true
end

\end{verbatim}
\subsubsection{User Model}
\begin{verbatim}
class User < ActiveRecord::Base
  # Include default devise modules. Others available are:
  devise :database_authenticatable, :token_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :timeoutable, :validatable

  has_many :sales_checkout, :class_name => 'Sale', :foreign_key => "checkout_user_id"
  has_many :sales_customer, :class_name => 'Sale', :foreign_key => "customer_id"
  
  attr_accessible :role, :name, :postcode, :discount, :membership, :active, :email, :password, :password_confirmation, :remember_me

  #Event-B: {Stock_ctx_R0} axm2: partition(USER_PRIVILEGE,{Cashier},{Stock_Control},{Manager},{Owner})
  #Comment: Default was added as a result of merging the users and members
  validates :role,
    :inclusion  => { :in => [ 'Owner', 'Manager', 'Stock Control', 'Cashier', 'Default'],
    :message    => "%{value} is not a valid status" }
  

  #Event-B: {StockControl_R4} grd: userPrivileges(user) ∈ {Stock_Control, Manager, Owner, Cashier}
  #Comment: Used as guards throughout the model
  def can_checkout
    role == "Owner" or role == "Manager" or role == "Stock Control" or role =="Cashier"
  end

  #Event-B: {StockControl_R4} grd: userPrivileges(user) ∈ {Stock_Control, Manager, Owner}
  #Comment: Used as guards throughout the model  
  def can_manage_stock
    role == "Owner" or role == "Manager" or role == "Stock Control"
  end

  #Event-B: {StockControl_R4} grd: userPrivileges(user) ∈ {Manager, Owner}
  #Comment: Used as guards throughout the model  
  def can_report
    role == "Owner" or role == "Manager"
  end


  #Various Methods
  def num_sales
    sales_checkout.count
  end

  def num_purchases
    sales_customer.count
  end

  def total_sales
    sales_checkout.sum(&:total)
  end

  def total_purchases
    sales_customer.sum(&:total)
  end
  
end

\end{verbatim}
\subsubsection{ApplicationController}
\begin{verbatim}
class ApplicationController < ActionController::Base
  before_filter :authenticate_user!
  protect_from_forgery
end

\end{verbatim}
\subsubsection{HomeController}
\begin{verbatim}
class HomeController < ApplicationController
  def index
  end

  def help
  end
end

\end{verbatim}
\subsubsection{ProductsController}
\begin{verbatim}
class ProductsController < ApplicationController
  skip_before_filter  :authenticate_user!, :only => [:index, :show]
  # GET /products
  # GET /products.json
  def index
    @products = Product.order("name")

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @products }
    end
  end

  # GET /products/1
  # GET /products/1.json
  def show
    @product = Product.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @product }
    end
  end

  # GET /products/new
  # GET /products/new.json
  def new
    @product = Product.new

    StockLocation.all.each do |s|
      @product.stock_levels.build(:stock_location => s)
    end

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @product }
    end
  end

  # GET /products/1/edit
  def edit
    @product = Product.find(params[:id])

    StockLocation.all.each do |s|
      if !StockLevel.exists?(:product_id => params[:id].to_i, :stock_location_id =>s.id)
        @product.stock_levels.build(:stock_location => s)
      end
    end

  end

  # POST /products
  # POST /products.json
  # Event-b: NewProduct
  def create
    #raise params.inspect
    @supplier = nil
    if(params[:product][:supplier] != "") 
    @supplier = Supplier.find_by_id(Integer(params[:product][:supplier]))
    end

    params[:product][:supplier] = @supplier

    # Event-b: grd1:  product ∈ PRODUCT∖products
    @product = Product.new(params[:product])
    
    params[:stock_level].each do |sl_id, sl|
      @product.stock_levels.build(:stock_location => StockLocation.find(sl_id.to_i), :quantity =>sl[:quantity], :threshold => sl[:threshold])
    end

    respond_to do |format|
      # Event-b: act1: products ≔ products ∪ {product}
      # Event-b: act2:  productprice(product) ≔ price
      if @product.save
        format.html { redirect_to @product, notice: 'Product was successfully created.' }
        format.json { render json: @product, status: :created, location: @product }
      else
        format.html { render action: "new" }
        format.json { render json: @product.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /products/1
  # PUT /products/1.json
  # Event-b: UpdateProduct
  def update
    # Event-b: grd1:  product ∈ products
    @product = Product.find(params[:id])

    params[:stock_level].each do |sl_id, sl|
      begin
      @stock_id = StockLevel.find(:first, :conditions => {:product_id => params[:id].to_i, :stock_location_id =>sl_id.to_i})
        @product.stock_levels.update(@stock_id, :quantity =>sl[:quantity], :threshold => sl[:threshold])
      rescue ActiveRecord::RecordNotFound
        @product.stock_levels.build(:stock_location => StockLocation.find(sl_id.to_i), :quantity =>sl[:quantity], :threshold => sl[:threshold])
      end
    end

    respond_to do |format|
      @supplier = Supplier.find(Integer(params[:product][:supplier]))
      params[:product][:supplier] = @supplier

      # Event-b: act1:  productprice(product) ≔ price
      if @product.update_attributes(params[:product])
        format.html { redirect_to @product, notice: 'Product was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @product.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /products/1
  # DELETE /products/1.json
  def destroy
    @product = Product.find(params[:id])
    @product.destroy

    respond_to do |format|
      format.html { redirect_to products_url }
      format.json { head :no_content }
    end
  end

  # GET /products/1/activate
  # Event-b: ActivateProduct
  def activate
    # Event-b: grd1: product ∈ products
    @product = Product.find(params[:id])

    # Event-b: act1:  activeProducts ≔ activeProducts ∪ {product}
    @product.update_attribute(:active,true)
    @product.save


    respond_to do |format|
      format.html { redirect_to products_url }
      format.json { head :no_content }
    end
  end

  # GET /products/1/deactivate
  # Event-b: DeactivateProduct
  def deactivate
    # Event-b: grd1: product ∈ products
    @product = Product.find(params[:id])

    # Event-b: act1:  activeProducts ≔ activeProducts ∪ {product}
    @product.update_attribute(:active,false)
    @product.save

    respond_to do |format|
      format.html { redirect_to products_url }
      format.json { head :no_content }
    end
  end

end

\end{verbatim}
\subsubsection{RefundsController}
\begin{verbatim}
class RefundsController < ApplicationController
  # GET /refunds
  # GET /refunds.json
  def index
    @refunds = Refund.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @refunds }
    end
  end

  # GET /refunds/1
  # GET /refunds/1.json
  def show
    @refund = Refund.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @refund }
    end
  end

  # GET /refunds/new
  # GET /refunds/new.json
  def new
    @refund = Refund.new
    @refund.sale_item = SaleItem.find(params[:sale_item])

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @refund }
    end
  end

  # GET /refunds/1/edit
  def edit
    @refund = Refund.find(params[:id])
  end

  # POST /refunds
  # POST /refunds.json
  def create
    @refund = Refund.new(params[:refund])
    @refund.sale_item = SaleItem.find(params[:sale_item_id])
    @refund.checkout_user = current_user
    @refund.total = (@refund.sale_item.sub_total / @refund.sale_item.quantity) * @refund.quantity

    # Update stock levels
    @stock_location = StockLocation.where("previous_location_id is NULL")
    @stock_level = @refund.sale_item.product.stock_levels.find_by_stock_location_id(@stock_location)
    @stock_level.quantity += @refund.quantity

    respond_to do |format|
      if @refund.save and @stock_level.save
        format.html { redirect_to @refund, notice: 'Refund was successfully created.' }
        format.json { render json: @refund, status: :created, location: @refund }
      else
        format.html { render action: "new" }
        format.json { render json: @refund.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /refunds/1
  # PUT /refunds/1.json
  def update
    @refund = Refund.find(params[:id])
    @refund.total = (@refund.sale_item.sub_total / @refund.sale_item.quantity) * params[:refund][:quantity].to_i
    
    # Get previous quantity
    @previous_quantity = @refund.quantity
    
    # Update stock levels
    @stock_location = StockLocation.where("previous_location_id is NULL")
    @stock_level = @refund.sale_item.product.stock_levels.find_by_id(@stock_location)
    @stock_level.quantity += (@refund.quantity - @previous_quantity)

    respond_to do |format|
      if @refund.update_attributes(params[:refund])
        @stock_level.save
        
        format.html { redirect_to @refund, notice: 'Refund was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @refund.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /refunds/1
  # DELETE /refunds/1.json
  def destroy
    @refund = Refund.find(params[:id])
    @refund.destroy

    respond_to do |format|
      format.html { redirect_to refunds_url }
      format.json { head :no_content }
    end
  end

  def search
    matches = Sale.where(:id => params[:sale_id])
    if matches.any?
      redirect_to matches.first
    else
      redirect_to refunds_path, alert: 'Invalid Sale ID'
    end
  end
end

\end{verbatim}
\subsubsection{ReportsController}
\begin{verbatim}
class ReportsController < ApplicationController
  def index
  end

  def sale
    @sales = Sale.where(:status =>"Finished")

    @users = User.all

    @h = LazyHighCharts::HighChart.new('graph') do |f|
      f.options[:chart][:defaultSeriesType] = "area"
      f.options[:title][:text] = "Sales By Customer"
      f.options[:yAxis][:title][:text] = "Total of Sale"
      f.options[:xAxis] = { :title=>{:text=>"Date"}, :type => 'datetime',:dateTimeLabelFormats=>{:month=>'%e. %b',:year=>'%b'}}



      @users.each do |u| 
        f.series(:name=>u.name,
          :data=>u.sales_customer.where(:status =>"Finished").pluck(:updated_at).zip(u.sales_customer.where(:status =>"Finished").map(&:total).map(&:to_f))
        #User.find(4).sales_customer.pluck(:updated_at).zip(User.find(4).sales_customer.map(&:total).map(&:to_f))
          )
      end
    end


    respond_to do |format|
      format.html # sale.html.erb
    end
  end

  def stock
    @products = Product.all
 
    respond_to do |format|
      format.html # suppliers.html.erb
    end
  end

  def financial
    @products = Product.all
    @revenue = @products.sum(&:revenue)
    @cost = @products.sum(&:total_cost)
    @profit = @revenue - @cost 

    @gst = @revenue * -0.1
    @tax =  @gst*0.3

    @income = @profit + @gst + @tax


  end

  def staff
    @users = User.where(:role => [ 'Owner', 'Manager', 'Stock Control', 'Cashier'])

    respond_to do |format|
      format.html # suppliers.html.erb
    end
  end

  def supplier
    @supplier_stock_orders = SupplierStockOrder.all

    respond_to do |format|
      format.html # suppliers.html.erb
    end
  end

  def customer
    @users = User.all

    respond_to do |format|
      format.html # suppliers.html.erb
    end
  end
end

\end{verbatim}
\subsubsection{SalesController}
\begin{verbatim}
class SalesController < ApplicationController
  # GET /sales
  # GET /sales.json
  def index
    @sales = Sale.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @sales }
    end
  end

  # GET /sales/1
  # GET /sales/1.json
  def show
    @sale = Sale.find(params[:id])
    @sale_items = @sale.sale_items

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @sale }
    end
  end

  # GET /sales/new
  # GET /sales/new.json
  def new
    @current_sales = Sale.find_all_by_checkout_user_id_and_status(current_user.id, ['Adding to Cart', 'Checking Out'])

    if @current_sales.empty?
      @sale = Sale.new(:checkout_user  => current_user, :status => 'Adding to Cart')
      @sale.save

      respond_to do |format|
        format.html { redirect_to edit_sale_path(@sale) }
        format.json { render json: @sale}
      end
    else
      respond_to do |format|
        format.html # new.html.erb
        format.json { render json: @current_sales }
      end
    end
  end

  # GET /sales/1/edit
  def edit
    @sale = Sale.find(params[:id])

    case @sale.status
    when 'Adding to Cart'
      @sale_item = SaleItem.new({:sale => @sale})
      render @sale.status.parameterize.underscore
    when 'Checking Out'
      @transaction = Transaction.new(:sale => @sale)
      render 'checking_out'
    when 'Finished'
      redirect_to sale_path(@sale), :error => "Can't edit a finished sale"
    end
  end

  # POST /sales
  # POST /sales.json
  def create
    @sale = Sale.new(:checkout_user  => current_user, :status => 'Adding to Cart')
    @sale.save

    respond_to do |format|
      format.html { redirect_to edit_sale_path(@sale) }
      format.json { render json: @sale}
    end
  end

  # PUT /sales/1
  # PUT /sales/1.json
  def update
    params[:sale][:customer] = User.find_by_id(params[:sale][:customer])
    @sale = Sale.find(params[:id])

    respond_to do |format|
      if @sale.update_attributes(params[:sale])
        format.html { redirect_to edit_sale_path(@sale), notice: 'Sale was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @sale.errors, status: :unprocessable_entity }
      end
    end
  end

  def checkout
    @sale = Sale.find(params[:id])

    if @sale.status != 'Adding to Cart'
      redirect_to sales_path, alert: 'You can only proceed to payment from adding to cart'
    end

    @sale.status = 'Checking Out'
    @sale.save!

    respond_to do |format|
      format.html { redirect_to edit_sale_path(@sale) }
      format.json { head :no_content }
    end
  end

  def complete
    @sale = Sale.find(params[:id])

    if @sale.status != 'Checking Out'
      redirect_to sales_path, alert: 'You can only finish a sale during checkout.'
      return
    end

    if @sale.total > @sale.amount_paid + @sale.discount
      redirect_to edit_sale_path(@sale), alert: 'You must finish payment before completing a sale.'
      return
    end

    @sale.status = 'Finished'
    @sale.save!

    respond_to do |format|
      format.html { redirect_to @sale, notice: 'Sale complete.' }
      format.json { head :no_content }
    end
  end

  # DELETE /sales/1
  # DELETE /sales/1.json
  def destroy
    @sale = Sale.find(params[:id])
    @sale.destroy

    respond_to do |format|
      format.html { redirect_to sales_url }
      format.json { head :no_content }
    end
  end
end

\end{verbatim}
\subsubsection{SaleItemsController}
\begin{verbatim}
class SaleItemsController < ApplicationController
  # GET /sale_items
  # GET /sale_items.json
  def index
    @sale_items = SaleItem.all
    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @sale_items.to_json }
    end
  end

  # GET /sale_items/1
  # GET /sale_items/1.json
  def show
    @sale_item = SaleItem.find(params[:id])

    respond_to do |format|
      format.json { render :json => @sale_item.to_json }
    end
  end

  # GET /sale_items/new
  # GET /sale_items/new.json
  def new
    @sale = params[:sale]
    @sale_item = @sale.sale_items.build

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @sale_item }
    end
  end

  # GET /sale_items/1/edit
  def edit
    @sale_item = SaleItem.find(params[:id])
    @sale = @sale_item.sale
  end

  # POST /sale_items
  # POST /sale_items.json
  def create
    @product = Product.find_by_barcode(params[:sale_item][:product])
    params[:sale_item][:product] = @product;

    @sale = Sale.find(params[:sale_item][:sale])
    params[:sale_item][:sale] = @sale;

    @sale_item = SaleItem.find_by_sale_id_and_product_id(@sale.id, @product.id)
    if @sale_item.nil?
      @sale_item = SaleItem.new(params[:sale_item])
    else
      @sale_item.quantity += params[:sale_item][:quantity].to_i
    end

    @sale_item.sub_total = @sale_item.quantity * @sale_item.product.price

    respond_to do |format|
      if @sale_item.save
        format.json { render :show }
      else
        format.json { render json: @sale_item.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /sale_items/1
  # PUT /sale_items/1.json
  def update
    @product = Product.find(params[:sale_item][:product])
    params[:sale_item][:product] = @product;
    @sale_item = SaleItem.find(params[:id])

    respond_to do |format|
      if @sale_item.update_attributes(params[:sale_item])
        format.html { redirect_to sale_sale_items_path(@sale_item.sale), notice: 'Sale item was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @sale_item.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /sale_items/1
  # DELETE /sale_items/1.json
  def destroy
    @sale_item = SaleItem.find(params[:id])
    @sale = @sale_item.sale
    @sale_item.destroy

    respond_to do |format|
      format.html { redirect_to sale_sale_items_path(@sale) }
      format.json { head :no_content }
    end
  end
end

\end{verbatim}
\subsubsection{StockLevelsController}
\begin{verbatim}
class StockLevelsController < ApplicationController
  skip_before_filter  :authenticate_user!, :only => [:index, :show]
  # GET /stock_levels
  # GET /stock_levels.json
  def index
    @stock_levels = StockLevel.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @stock_levels }
    end
  end

  # GET /stock_levels/1
  # GET /stock_levels/1.json
  def show
    @stock_level = StockLevel.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @stock_level }
    end
  end

  # GET /stock_levels/new
  # GET /stock_levels/new.json
  def new
    @stock_level = StockLevel.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @stock_level }
    end
  end

  # GET /stock_levels/1/edit
  def edit
    @stock_level = StockLevel.find(params[:id])
  end

  # POST /stock_levels
  # POST /stock_levels.json
  def create
    @product = Product.find(Integer(params[:stock_level][:product]))
    @stock_location = StockLocation.find(Integer(params[:stock_level][:stock_location]))

    params[:stock_level][:product] = @product
    params[:stock_level][:stock_location] = @stock_location

    @stock_level = StockLevel.new(params[:stock_level])

    respond_to do |format|
      if @stock_level.save
        format.html { redirect_to @stock_level, notice: 'Stock level was successfully created.' }
        format.json { render json: @stock_level, status: :created, location: @stock_level }
      else
        format.html { render action: "new" }
        format.json { render json: @stock_level.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /stock_levels/1
  # PUT /stock_levels/1.json
  # Event-b: SetProductLevel
  def update
    #Event-b: grd1: product ∈ activeProducts, 
    @stock_level = StockLevel.find(params[:id])

    respond_to do |format|
      #Event-b: act1: productlevels(product) ≔ {Floor ↦ floor,Backroom ↦ backroom,Warehouse ↦ warehouse}
      if @stock_level.update_attributes(params[:stock_level])
        format.html { redirect_to @stock_level, notice: 'Stock level was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @stock_level.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /stock_levels/1
  # DELETE /stock_levels/1.json
  def destroy
    @stock_level = StockLevel.find(params[:id])
    @stock_level.destroy

    respond_to do |format|
      format.html { redirect_to stock_levels_url }
      format.json { head :no_content }
    end
  end
end

\end{verbatim}
\subsubsection{StockLocationsController}
\begin{verbatim}
class StockLocationsController < ApplicationController
  skip_before_filter  :authenticate_user!, :only => [:index, :show]

  # GET /stock_locations
  # GET /stock_locations.json
  def index
    @stock_locations = StockLocation.order("id DESC")

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @stock_locations }
    end
  end

  # GET /stock_locations/1
  # GET /stock_locations/1.json
  def show
    @stock_location = StockLocation.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @stock_location }
    end
  end

  # GET /stock_locations/new
  # GET /stock_locations/new.json
  def new
    @stock_location = StockLocation.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @stock_location }
    end
  end

  # GET /stock_locations/1/edit
  def edit
    @stock_location = StockLocation.find(params[:id])

  end

  # POST /stock_locations
  # POST /stock_locations.json
  def create
    @previous_location = nil
    if(params[:stock_location][:previous_location_id] != "") 
      @previous_location = StockLocation.find(Integer(params[:stock_location][:previous_location_id]))
    end
    params[:stock_location][:previous_location] = @previous_location
    params[:stock_location].delete :previous_location_id


    @stock_location = StockLocation.new(params[:stock_location])

    respond_to do |format|
      if @stock_location.save
        format.html { redirect_to stock_locations_path, notice: 'Stock location was successfully created.' }
        format.json { render json: @stock_location, status: :created, location: @stock_location }
      else
        format.html { render action: "new" }
        format.json { render json: @stock_location.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /stock_locations/1
  # PUT /stock_locations/1.json
  def update
    @previous_location = nil
    if(params[:stock_location][:previous_location_id] != "") 
      @previous_location = StockLocation.find(Integer(params[:stock_location][:previous_location_id]))
    end

    params[:stock_location][:previous_location] = @previous_location
    params[:stock_location].delete :previous_location_id

    @stock_location = StockLocation.find(params[:id])

    respond_to do |format|
      if @stock_location.update_attributes(params[:stock_location])
        format.html { redirect_to stock_locations_path, notice: 'Stock location was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @stock_location.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /stock_locations/1
  # DELETE /stock_locations/1.json
  def destroy
    @stock_location = StockLocation.find(params[:id])
    @stock_location.destroy

    respond_to do |format|
      format.html { redirect_to stock_locations_url }
      format.json { head :no_content }
    end
  end
end

\end{verbatim}
\subsubsection{StockTransfersController}
\begin{verbatim}
class StockTransfersController < ApplicationController
  # GET /stock_transfers
  # GET /stock_transfers.json
  def index
    @stock_transfers = StockTransfer.order("complete DESC")

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @stock_transfers }
    end
  end

  # GET /stock_transfers/1
  # GET /stock_transfers/1.json
  def show
    @stock_transfer = StockTransfer.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @stock_transfer }
    end
  end

  # GET /stock_transfers/new
  # GET /stock_transfers/new.json
  def new
    @stock_transfer = StockTransfer.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @stock_transfer }
    end
  end

  # GET /stock_transfers/1/edit
  def edit
    @stock_transfer = StockTransfer.find(params[:id])
  end

  # POST /stock_transfers
  # POST /stock_transfers.json
  def create
    

    @product = Product.find(Integer(params[:stock_transfer][:product]))
    @stock_location = StockLocation.find(Integer(params[:stock_transfer][:stock_location]))

    params[:stock_transfer][:product] = @product
    params[:stock_transfer][:stock_location] = @stock_location

    @stock_transfer = StockTransfer.new(params[:stock_transfer])

    respond_to do |format|
      if @stock_transfer.save
        format.html { redirect_to stock_transfers_path, notice: 'Stock transfer was successfully created.' }
        format.json { render json: @stock_transfer, status: :created, location: @stock_transfer }
      else
        format.html { render action: "new" }
        format.json { render json: @stock_transfer.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /stock_transfers/1
  # PUT /stock_transfers/1.json
  def update

    @stock_transfer = StockTransfer.find(params[:id])

    respond_to do |format|
      @product = Product.find(Integer(params[:stock_transfer][:product]))
      @stock_location = StockLocation.find(Integer(params[:stock_transfer][:stock_location]))

      params[:stock_transfer][:product] = @product
      params[:stock_transfer][:stock_location] = @stock_location
      if @stock_transfer.update_attributes(params[:stock_transfer])
        format.html { redirect_to stock_transfers_path, notice: 'Stock transfer was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @stock_transfer.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /stock_transfers/1
  # DELETE /stock_transfers/1.json
  def destroy
    @stock_transfer = StockTransfer.find(params[:id])
    @stock_transfer.destroy

    respond_to do |format|
      format.html { redirect_to stock_transfers_url }
      format.json { head :no_content }
    end
  end

  
  # Event-b: MoveStockToFloor & MoveStockToBackroom
  def complete
    @stock_transfer = StockTransfer.find(params[:id])
    @product = @stock_transfer.product
    # Event-b: product ∈ activeProducts
    @locationto = @stock_transfer.stock_location
    @locationfrom = @locationto.previous_location


    #Mark as complete
    @stock_transfer.update_attribute(:complete,true)
    @stock_transfer.save

    #Event-b : act1: productlevels(product) ≔ productlevels(product) <+ {Floor ↦ (productlevels(product)(Floor) + amount),Backroom ↦ (productlevels(product)(Backroom) − amount)}
    @stock_level_to = StockLevel.find_by_product_id_and_stock_location_id(@product,@locationto)
    @stock_level_to.update_attribute(:quantity, (@stock_level_to.quantity + @stock_transfer.quantity))
    @stock_level_to.save

    @stock_level_from = StockLevel.find_by_product_id_and_stock_location_id(@product,@locationfrom)
    @stock_level_from.update_attribute(:quantity, (@stock_level_from.quantity - @stock_transfer.quantity))
    @stock_level_from.save




    respond_to do |format|
      format.html { redirect_to stock_transfers_url }
      format.json { head :no_content }
    end
  end


end

\end{verbatim}
\subsubsection{SupplierStockOrdersController}
\begin{verbatim}
class SupplierStockOrdersController < ApplicationController
  # GET /supplier_stock_orders
  # GET /supplier_stock_orders.json
  def index
    @supplier_stock_orders = SupplierStockOrder.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @supplier_stock_orders }
    end
  end

  # GET /supplier_stock_orders/1
  # GET /supplier_stock_orders/1.json
  def show
    @supplier_stock_order = SupplierStockOrder.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @supplier_stock_order }
    end
  end

  # GET /supplier_stock_orders/new
  # GET /supplier_stock_orders/new.json
  def new
    @supplier_stock_order = SupplierStockOrder.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @supplier_stock_order }
    end
  end

  # GET /supplier_stock_orders/1/edit
  def edit
    @supplier_stock_order = SupplierStockOrder.find(params[:id])
  end

  # POST /supplier_stock_orders
  # POST /supplier_stock_orders.json

  # Event-b: NewOrder
  def create
    # Event-b: product ∈ activeProducts
    @product = Product.find(params[:supplier_stock_order][:product])
    params[:supplier_stock_order][:product] = @product
   
    #Event-b: act1: orders ≔ orders ∪ {product ↦ quantity}  ›
    #Event-b: act2: orderStatus ≔ orderStatus ∪ {product ↦ Created}
    @supplier_stock_order = SupplierStockOrder.new(params[:supplier_stock_order])

    respond_to do |format|
      if @supplier_stock_order.save
        format.html { redirect_to @supplier_stock_order, notice: 'Supplier stock order was successfully created.' }
        format.json { render json: @supplier_stock_order, status: :created, location: @supplier_stock_order }
      else
        format.html { render action: "new" }
        format.json { render json: @supplier_stock_order.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /supplier_stock_orders/1
  # PUT /supplier_stock_orders/1.json

  #Event-b: EditOrder
  def update
    #Event-b: grd1: product ∈ activeProducts
    @product = Product.find(params[:supplier_stock_order][:product])
    params[:supplier_stock_order][:product] = @product

    @supplier_stock_order = SupplierStockOrder.find(params[:id])

    respond_to do |format|
      #Event-b: act1: orders ≔ orders <+ {product ↦ quantity}
      if @supplier_stock_order.update_attributes(params[:supplier_stock_order])
        format.html { redirect_to @supplier_stock_order, notice: 'Supplier stock order was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @supplier_stock_order.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /supplier_stock_orders/1
  # DELETE /supplier_stock_orders/1.json
  # Event-b: CancelOrder
  def destroy
    @supplier_stock_order = SupplierStockOrder.find(params[:id])
    @supplier_stock_order.destroy

    respond_to do |format|
      format.html { redirect_to supplier_stock_orders_url }
      format.json { head :no_content }
    end
  end

  # GET /supplier_stock_orders/1/process

  #Event-b: UpdateOrderToDelivering
  def process_order
    @supplier_stock_order = SupplierStockOrder.find(params[:id])


    #Mark as processed
    #Event-b: act1: orderStatus ≔ orderStatus <+ {product ↦ Delivering}
    @supplier_stock_order.update_attribute(:status,"Processed")
    @supplier_stock_order.save

 


    respond_to do |format|
      format.html { redirect_to supplier_stock_orders_url }
      format.json { head :no_content }
    end
  end

  # GET /supplier_stock_orders/1/complete
  #Event-b: UpdateOrderToComplete & CompleteOrder
  def complete
    @supplier_stock_order = SupplierStockOrder.find(params[:id])
    @product = @supplier_stock_order.product
    @stock_location = StockLocation.where("previous_location_id is NULL")


    #Mark as processed
    #Event-b: act1: orderStatus ≔ orderStatus <+ {product ↦ Completed}
    @supplier_stock_order.update_attribute(:status,"Completed")
    @supplier_stock_order.save

    #Event-b: productlevels(product) ≔ productlevels(product) <+ {Warehouse ↦ (productlevels(product)(Warehouse) + orders(product))}
    @stock_level = StockLevel.find_by_product_id_and_stock_location_id(@product,@stock_location)
    @stock_level.update_attribute(:quantity, (@stock_level.quantity + @supplier_stock_order.quantity))
    @stock_level.save

 


    respond_to do |format|
      format.html { redirect_to supplier_stock_orders_url }
      format.json { head :no_content }
    end
  end
end

\end{verbatim}
\subsubsection{SuppliersController}
\begin{verbatim}
class SuppliersController < ApplicationController
  # GET /suppliers
  # GET /suppliers.json
  def index
    @suppliers = Supplier.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @suppliers }
    end
  end

  # GET /suppliers/1
  # GET /suppliers/1.json
  def show
    @supplier = Supplier.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @supplier }
    end
  end

  # GET /suppliers/new
  # GET /suppliers/new.json
  def new
    @supplier = Supplier.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @supplier }
    end
  end

  # GET /suppliers/1/edit
  def edit
    @supplier = Supplier.find(params[:id])
  end

  # POST /suppliers
  # POST /suppliers.json
  def create
    @supplier = Supplier.new(params[:supplier])

    respond_to do |format|
      if @supplier.save
        format.html { redirect_to @supplier, notice: 'Supplier was successfully created.' }
        format.json { render json: @supplier, status: :created, location: @supplier }
      else
        format.html { render action: "new" }
        format.json { render json: @supplier.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /suppliers/1
  # PUT /suppliers/1.json
  def update
    @supplier = Supplier.find(params[:id])

    respond_to do |format|
      if @supplier.update_attributes(params[:supplier])
        format.html { redirect_to @supplier, notice: 'Supplier was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @supplier.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /suppliers/1
  # DELETE /suppliers/1.json
  def destroy
    @supplier = Supplier.find(params[:id])
    @supplier.destroy

    respond_to do |format|
      format.html { redirect_to suppliers_url }
      format.json { head :no_content }
    end
  end
end

\end{verbatim}
\subsubsection{TransactionsController}
\begin{verbatim}
class TransactionsController < ApplicationController
  # GET /transactions
  # GET /transactions.json
  def index
    @transactions = Transaction.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @transactions }
    end
  end

  # GET /transactions/1
  # GET /transactions/1.json
  def show
    @transaction = Transaction.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @transaction }
    end
  end

  # GET /transactions/new
  # GET /transactions/new.json
  def new
    @transaction = Transaction.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @transaction }
    end
  end

  # GET /transactions/1/edit
  def edit
    @transaction = Transaction.find(params[:id])
  end

  # POST /transactions
  # POST /transactions.json
  def create
    params[:transaction][:sale] = Sale.find params[:transaction][:sale]
    @transaction = Transaction.new(params[:transaction])

    respond_to do |format|
      if @transaction.save
        format.html { redirect_to edit_sale_path(@transaction.sale), notice: 'Transaction was successfully created.' }
        format.json { render json: @transaction, status: :created, location: @transaction }
      else
        @sale = @transaction.sale
        format.html { render :action => "../sales/checking_out" }
        format.json { render json: @transaction.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /transactions/1
  # PUT /transactions/1.json
  def update
    @transaction = Transaction.find(params[:id])

    respond_to do |format|
      if @transaction.update_attributes(params[:transaction])
        format.html { redirect_to @transaction, notice: 'Transaction was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @transaction.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /transactions/1
  # DELETE /transactions/1.json
  def destroy
    @transaction = Transaction.find(params[:id])
    @transaction.destroy

    respond_to do |format|
      format.html { redirect_to transactions_url }
      format.json { head :no_content }
    end
  end
end

\end{verbatim}
\subsubsection{UsersController}
\begin{verbatim}
class UsersController < ApplicationController
  def members_index
    @users = User.all
    respond_to do |format|
      format.html
      format.json { render json: @users }
    end
  end

  def staff_index
    @users = User.where(:role  => ['Owner', 'Manager', 'Stock Control', 'Cashier'])

    respond_to do |format|
      format.html
      format.json { render json: @users }
    end
  end
  
  def edit
    @user = User.find(params[:id])
    respond_to do |format|
      format.html
      format.json { render json: @user }
    end
  end

  def update
    @user = User.find(params[:id])
    @user.role = params[:role]
    @user.discount = params[:discount]
    @user.membership = params[:membership]

    respond_to do |format|
      if @user.save     
        format.html { 
          flash[:notice] = 'User was successfully updated.'
          render :edit
        }
        format.json { render json: @user }
      else
        format.html { render action: "edit" }
      end
    end
  end
end

\end{verbatim}
\subsubsection{•}
\begin{verbatim}
\end{verbatim}\\
\subsubsection{•}
\begin{verbatim}
\end{verbatim}
\subsubsection{•}
\begin{verbatim}
\end{verbatim}\\
\subsubsection{•}
\begin{verbatim}
\end{verbatim}
\subsubsection{•}
\begin{verbatim}
\end{verbatim}\\
\subsubsection{•}
\begin{verbatim}
\end{verbatim}
\subsubsection{•}
\begin{verbatim}
\end{verbatim}\\
\subsubsection{•}
\begin{verbatim}
\end{verbatim}
\subsubsection{•}
\begin{verbatim}
\end{verbatim}\\
\subsubsection{•}
\begin{verbatim}
\end{verbatim}
\subsubsection{•}
\begin{verbatim}
\end{verbatim}

\end{document}

